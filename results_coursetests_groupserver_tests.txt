============================= test session starts ==============================
platform linux -- Python 3.7.3, pytest-6.2.3, py-1.10.0, pluggy-0.13.1
rootdir: /tmp_amd/kamen/export/kamen/3/cs1531/automark/tempstore, configfile: pytest.ini
plugins: forked-1.3.0, xdist-2.2.1, hypothesis-6.1.1, timeout-1.4.2
collected 247 items

http_tests/admin_tests/test_admin_user_remove.py EEEEEEsEEEE             [  4%]
http_tests/admin_tests/test_admin_userpermission_change.py EEEEEE        [  6%]
http_tests/auth_tests/test_auth_login.py EE.E                            [  8%]
http_tests/auth_tests/test_auth_logout.py EE                             [  9%]
http_tests/auth_tests/test_auth_register.py .........................EFF [ 20%]
F                                                                        [ 21%]
http_tests/channel_tests/test_channel_addowner.py EEEEEEsEE              [ 24%]
http_tests/channel_tests/test_channel_details.py EEEE                    [ 26%]
http_tests/channel_tests/test_channel_invite.py sEEEEEE                  [ 29%]
http_tests/channel_tests/test_channel_join.py EEEsEE                     [ 31%]
http_tests/channel_tests/test_channel_leave.py EEEE                      [ 33%]
http_tests/channel_tests/test_channel_messages.py EEEEEEEE               [ 36%]
http_tests/channel_tests/test_channel_removeowner.py EEEEEEsEE           [ 40%]
http_tests/channels_tests/test_channels_create.py EEEEE                  [ 42%]
http_tests/channels_tests/test_channels_list.py EEEEEEEEE                [ 45%]
http_tests/channels_tests/test_channels_listall.py EEEEE                 [ 47%]
http_tests/dm_tests/test_dm_create.py EEEEE                              [ 49%]
http_tests/dm_tests/test_dm_details.py EEEE                              [ 51%]
http_tests/dm_tests/test_dm_invite.py sEEEEE                             [ 53%]
http_tests/dm_tests/test_dm_leave.py EEEE                                [ 55%]
http_tests/dm_tests/test_dm_list.py EEEEE                                [ 57%]
http_tests/dm_tests/test_dm_messages.py EEEEEEEE                         [ 60%]
http_tests/dm_tests/test_dm_remove.py EEEEE                              [ 62%]
http_tests/echo_tests/echo_test.py ..                                    [ 63%]
http_tests/message_tests/test_message_edit.py EEEEEEEE                   [ 66%]
http_tests/message_tests/test_message_remove.py EEEEEE                   [ 69%]
http_tests/message_tests/test_message_send.py EEsEE                      [ 71%]
http_tests/message_tests/test_message_senddm.py EEsEE                    [ 73%]
http_tests/message_tests/test_message_share.py EEEEEEssssssE             [ 78%]
http_tests/other_tests/test_clear.py E                                   [ 78%]
http_tests/other_tests/test_notifications_get.py EEEEsssEEssEEEEEE       [ 85%]
http_tests/other_tests/test_search.py EEEEEEEE                           [ 89%]
http_tests/other_tests/test_users_all.py EE                              [ 89%]
http_tests/user_tests/test_user_profile.py EEE                           [ 91%]
http_tests/user_tests/test_user_profile_setemail.py EEEEEEEEE            [ 94%]
http_tests/user_tests/test_user_profile_sethandle.py EEEEEEE             [ 97%]
http_tests/user_tests/test_user_profile_setname.py EEEEEE                [100%]

==================================== ERRORS ====================================
_______________ ERROR at setup of test_removal_can_do_no_action ________________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a1c37ea0>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
____________ ERROR at setup of test_removal_messages_correct_format ____________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a1bfaa60>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
____________ ERROR at setup of test_removal_profile_still_fetchable ____________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a1bfaf28>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________ ERROR at setup of test_removal_removed_from_channel ______________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a1b64620>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
________________ ERROR at setup of test_removal_removed_from_dm ________________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a1b64b70>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_______________ ERROR at setup of test_removal_not_in_users_all ________________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a1b648c8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________________ ERROR at setup of test_invalid_user ______________________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a1b6b510>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_______________ ERROR at setup of test_cannot_remove_last_owner ________________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a1b6bd08>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
______________ ERROR at setup of test_cannot_remove_user_nonowner ______________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a1b6bf28>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a1b0e488>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________ ERROR at setup of test_successful_permission_change ______________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a1b0ebf8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
________ ERROR at setup of test_changing_to_same_permission_idempotent _________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a1b0e268>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
___________ ERROR at setup of test_nonowner_cant_change_permissions ____________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a1b166a8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________________ ERROR at setup of test_invalid_user ______________________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a1b16bf8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
__________________ ERROR at setup of test_invalid_permission ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a1b16a60>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a1b33730>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
___________________ ERROR at setup of test_successful_login ____________________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a1b33c80>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_________________ ERROR at setup of test_can_have_two_sessions _________________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a1b33598>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
___________ ERROR at setup of test_registered_but_incorrect_password ___________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a1b40a60>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
___________________ ERROR at setup of test_successful_logout ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a1b40d08>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_________________ ERROR at setup of test_not_logged_in_logout __________________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a1ad52f0>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
________________ ERROR at setup of test_successful_registration ________________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a1ad5950>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_________ ERROR at setup of test_global_owner_non_member_can_addowner __________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a1ae9268>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
________ ERROR at setup of test_channel_owner_can_addowner_when_member _________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a1ae9a60>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
______ ERROR at setup of test_channel_owner_can_addowner_when_non_member _______

user_factory = <function user_factory.<locals>.make_user at 0x7f76a1ae9ea0>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
______________ ERROR at setup of test_non_member_cannot_add_owner ______________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a1abc2f0>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
________________ ERROR at setup of test_member_cannot_add_owner ________________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a1abc950>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_______ ERROR at setup of test_cannot_addowner_prexisting_channel_owner ________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a1abcd08>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
________________ ERROR at setup of test_with_invalid_channel_id ________________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a1a98488>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a1a98a60>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
___________________ ERROR at setup of test_member_successful ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a1a98f28>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_______________ ERROR at setup of test_non_member_not_successful _______________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a1ab3620>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
__________________ ERROR at setup of test_invalid_channel_id ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a1ab38c8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a1ab3f28>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
__________________ ERROR at setup of test_invite_global_owner __________________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a1a4d488>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_________________ ERROR at setup of test_invite_global_member __________________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a1a4dc80>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
__________ ERROR at setup of test_invitation_from_non_channel_member ___________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a1a4da60>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
__________________ ERROR at setup of test_channel_id_invalid ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a1a556a8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________________ ERROR at setup of test_u_id_invalid ______________________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a1a55c80>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
___________________ ERROR at setup of test_invalidated_token ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a1a55bf8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
___________ ERROR at setup of test_global_owner_join_channel_public ____________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a1a6f7b8>

    @pytest.fixture
    def user_buzz(user_factory):
>       return user_factory('buzz.lightyear@starcommand.com', 'qazwsx@@', 'buzz', 'lightyear')

http_tests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'buzz.lightyear@starcommand.com', password = 'qazwsx@@'
name_first = 'buzz', name_last = 'lightyear'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
___________ ERROR at setup of test_global_owner_join_channel_private ___________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a1a6fbf8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_______________ ERROR at setup of test_global_member_join_public _______________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a1a6fa60>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
________________ ERROR at setup of test_join_invalid_channel_id ________________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a1a08488>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
___________________ ERROR at setup of test_invalidated_token ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a1a08e18>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
___________ ERROR at setup of test_member_leave_channel_successfully ___________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a1a082f0>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________ ERROR at setup of test_leave_channel_when_not_member _____________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a1a0e7b8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
__________________ ERROR at setup of test_invalid_channel_id ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a1a0eb70>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a1a0e620>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_______________ ERROR at setup of test_under_fifty_messages_sent _______________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a1a38840>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_______________ ERROR at setup of test_over_fifty_messages_sent ________________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a1a38d90>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_______________ ERROR at setup of test_removal_by_edit_reflected _______________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a19cb2f0>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________ ERROR at setup of test_removal_by_deletion_reflected _____________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a19cb8c8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
____ ERROR at setup of test_input_error_when_start_greater_than_message_num ____

user_factory = <function user_factory.<locals>.make_user at 0x7f76a19cbe18>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_________ ERROR at setup of test_access_error_when_user_is_non_member __________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a19d3400>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
__________ ERROR at setup of test_input_error_when_channel_id_invalid __________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a19d39d8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_________ ERROR at setup of test_access_error_when_invalid_token_given _________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a19d30d0>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
________________ ERROR at setup of test_owner_can_remove_owner _________________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a19e7598>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________ ERROR at setup of test_global_owner_can_remove_owner _____________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a19e7840>

    @pytest.fixture
    def user_zerg(user_factory):
>       return user_factory('zerg.thedestroyer@zergworld.com', '!!qazwsx', 'lord', 'zerg')

http_tests/fixtures.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'zerg.thedestroyer@zergworld.com', password = '!!qazwsx'
name_first = 'lord', name_last = 'zerg'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________ ERROR at setup of test_nonmember_cannot_remove_owner _____________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a19e7f28>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
______________ ERROR at setup of test_member_cannot_remove_owner _______________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a19f4620>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_______________ ERROR at setup of test_cannot_remove_last_owner ________________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a19f4a60>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
________________ ERROR at setup of test_cannot_remove_non_owner ________________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a19f4f28>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
________________ ERROR at setup of test_with_invalid_channel_id ________________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a1999400>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
___________________ ERROR at setup of test_invalidated_token ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a1999bf8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
____________ ERROR at setup of test_create_channel[True-andys room] ____________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a1999f28>

    @pytest.fixture
    def user_zerg(user_factory):
>       return user_factory('zerg.thedestroyer@zergworld.com', '!!qazwsx', 'lord', 'zerg')

http_tests/fixtures.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'zerg.thedestroyer@zergworld.com', password = '!!qazwsx'
name_first = 'lord', name_last = 'zerg'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
___________ ERROR at setup of test_create_channel[False-andys room] ____________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a19aa488>

    @pytest.fixture
    def user_zerg(user_factory):
>       return user_factory('zerg.thedestroyer@zergworld.com', '!!qazwsx', 'lord', 'zerg')

http_tests/fixtures.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'zerg.thedestroyer@zergworld.com', password = '!!qazwsx'
name_first = 'lord', name_last = 'zerg'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_ ERROR at setup of test_channel_name_length[True-I AM NOT A TOY AND ALSO THIS NAME IS TOO LONG] _

user_factory = <function user_factory.<locals>.make_user at 0x7f76a19aac80>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_ ERROR at setup of test_channel_name_length[False-I AM NOT A TOY AND ALSO THIS NAME IS TOO LONG] _

user_factory = <function user_factory.<locals>.make_user at 0x7f76a19aaa60>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
___________________ ERROR at setup of test_invalidated_token ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a19c5510>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
__________________ ERROR at setup of test_when_in_no_channels __________________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a19c5c80>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
____________ ERROR at setup of test_when_in_one_channel[True-andy] _____________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a19c57b8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
____________ ERROR at setup of test_when_in_one_channel[False-andy] ____________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a1959730>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
____ ERROR at setup of test_when_in_multiple_channels[False-True-ZERG-andy] ____

user_factory = <function user_factory.<locals>.make_user at 0x7f76a1959c80>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
___ ERROR at setup of test_when_in_multiple_channels[False-False-ZERG-andy] ____

user_factory = <function user_factory.<locals>.make_user at 0x7f76a1959598>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
____ ERROR at setup of test_when_in_multiple_channels[True-True-ZERG-andy] _____

user_factory = <function user_factory.<locals>.make_user at 0x7f76a19697b8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
____ ERROR at setup of test_when_in_multiple_channels[True-False-ZERG-andy] ____

user_factory = <function user_factory.<locals>.make_user at 0x7f76a1969d08>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_______________ ERROR at setup of test_list_after_leave_channel ________________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a1969620>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
___________________ ERROR at setup of test_invalidated_token ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a19096a8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
___________________ ERROR at setup of test_when_no_channels ____________________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a1909e18>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
____________ ERROR at setup of test_when_one_channel_exists_private ____________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a1914378>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
____________ ERROR at setup of test_when_one_channel_exists_public _____________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a19149d8>

    @pytest.fixture
    def user_zerg(user_factory):
>       return user_factory('zerg.thedestroyer@zergworld.com', '!!qazwsx', 'lord', 'zerg')

http_tests/fixtures.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'zerg.thedestroyer@zergworld.com', password = '!!qazwsx'
name_first = 'lord', name_last = 'zerg'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________ ERROR at setup of test_when_multiple_channels_exist ______________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a1914e18>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
___________________ ERROR at setup of test_invalidated_token ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a192e400>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
________________ ERROR at setup of test_successful_dm_creation _________________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a192ea60>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
________________ ERROR at setup of test_dm_name_creation_single ________________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a192ed08>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_______________ ERROR at setup of test_dm_name_creation_multiple _______________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a1942488>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
__________________ ERROR at setup of test_dm_to_invalid_user ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a1942ae8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a1942510>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
___________________ ERROR at setup of test_member_successful ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a18d1510>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_______________ ERROR at setup of test_non_member_not_successful _______________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a18d1a60>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________________ ERROR at setup of test_invalid_dm_id _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a18d1f28>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a18e5598>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_________________ ERROR at setup of test_invite_global_member __________________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a18e5950>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________ ERROR at setup of test_invitation_from_non_dm_member _____________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a18e5bf8>

    @pytest.fixture
    def user_zerg(user_factory):
>       return user_factory('zerg.thedestroyer@zergworld.com', '!!qazwsx', 'lord', 'zerg')

http_tests/fixtures.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'zerg.thedestroyer@zergworld.com', password = '!!qazwsx'
name_first = 'lord', name_last = 'zerg'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________________ ERROR at setup of test_dm_id_invalid _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a1900730>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________________ ERROR at setup of test_u_id_invalid ______________________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a1900b70>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
___________________ ERROR at setup of test_invalidated_token ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a19008c8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________ ERROR at setup of test_member_leave_dm_successfully ______________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a1893510>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________ ERROR at setup of test_leave_channel_when_not_member _____________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a1893c80>

    @pytest.fixture
    def user_zerg(user_factory):
>       return user_factory('zerg.thedestroyer@zergworld.com', '!!qazwsx', 'lord', 'zerg')

http_tests/fixtures.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'zerg.thedestroyer@zergworld.com', password = '!!qazwsx'
name_first = 'lord', name_last = 'zerg'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________________ ERROR at setup of test_invalid_dm_id _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a1893400>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a18a6730>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
____________________ ERROR at setup of test_when_in_no_dms _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a18a6c80>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
____________________ ERROR at setup of test_when_in_one_dm _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a18a6598>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_________________ ERROR at setup of test_when_in_multiple_dms __________________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a18467b8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
__________________ ERROR at setup of test_list_after_leave_dm __________________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a1846d08>

    @pytest.fixture
    def user_buzz(user_factory):
>       return user_factory('buzz.lightyear@starcommand.com', 'qazwsx@@', 'buzz', 'lightyear')

http_tests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'buzz.lightyear@starcommand.com', password = 'qazwsx@@'
name_first = 'buzz', name_last = 'lightyear'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
___________________ ERROR at setup of test_invalidated_token ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a1846620>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_______________ ERROR at setup of test_under_fifty_messages_sent _______________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a18526a8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_______________ ERROR at setup of test_over_fifty_messages_sent ________________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a1852e18>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_______________ ERROR at setup of test_removal_by_edit_reflected _______________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a1865378>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________ ERROR at setup of test_removal_by_deletion_reflected _____________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a1865950>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
____ ERROR at setup of test_input_error_when_start_greater_than_message_num ____

user_factory = <function user_factory.<locals>.make_user at 0x7f76a1865d08>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_________ ERROR at setup of test_access_error_when_user_is_non_member __________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a1874510>

    @pytest.fixture
    def user_zerg(user_factory):
>       return user_factory('zerg.thedestroyer@zergworld.com', '!!qazwsx', 'lord', 'zerg')

http_tests/fixtures.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'zerg.thedestroyer@zergworld.com', password = '!!qazwsx'
name_first = 'lord', name_last = 'zerg'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
____________ ERROR at setup of test_input_error_when_dm_id_invalid _____________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a1874950>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_________ ERROR at setup of test_access_error_when_invalid_token_given _________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a1874d08>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_________________ ERROR at setup of test_successful_dm_removal _________________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a180e400>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_______________ ERROR at setup of test_removal_removes_messages ________________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a180e840>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_______________ ERROR at setup of test_nonowner_cannot_remove_dm _______________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a180ef28>

    @pytest.fixture
    def user_buzz(user_factory):
>       return user_factory('buzz.lightyear@starcommand.com', 'qazwsx@@', 'buzz', 'lightyear')

http_tests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'buzz.lightyear@starcommand.com', password = 'qazwsx@@'
name_first = 'buzz', name_last = 'lightyear'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________________ ERROR at setup of test_invalid_dm_id _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a1824620>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a1824a60>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
___________ ERROR at setup of test_original_poster_can_edit_message ____________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a1824f28>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
____________ ERROR at setup of test_owner_can_edit_members_message _____________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a1832598>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_________ ERROR at setup of test_global_owner_can_edit_members_message _________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a1832950>

    @pytest.fixture
    def user_zerg(user_factory):
>       return user_factory('zerg.thedestroyer@zergworld.com', '!!qazwsx', 'lord', 'zerg')

http_tests/fixtures.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'zerg.thedestroyer@zergworld.com', password = '!!qazwsx'
name_first = 'lord', name_last = 'zerg'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
______________ ERROR at setup of test_empty_edit_deletes_message _______________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a1832f28>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
________________ ERROR at setup of test_invalid_message_length _________________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a17d0488>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
______________ ERROR at setup of test_cannot_edit_deleted_message ______________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a17d0c80>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________ ERROR at setup of test_nonowner_nonposter_cant_edit ______________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a17d0a60>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a17e36a8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
__________ ERROR at setup of test_original_poster_can_remove_message ___________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a17e3a60>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
___________ ERROR at setup of test_owner_can_remove_members_message ____________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a17e3510>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
________ ERROR at setup of test_global_owner_can_remove_members_message ________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a17fb598>

    @pytest.fixture
    def user_zerg(user_factory):
>       return user_factory('zerg.thedestroyer@zergworld.com', '!!qazwsx', 'lord', 'zerg')

http_tests/fixtures.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'zerg.thedestroyer@zergworld.com', password = '!!qazwsx'
name_first = 'lord', name_last = 'zerg'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________ ERROR at setup of test_cannot_remove_deleted_message _____________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a17fbd90>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
________ ERROR at setup of test_nonowner_nonposter_cant_remove_message _________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a17fb378>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a17c08c8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________________ ERROR at setup of test_valid_message _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a17c0d08>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
____________________ ERROR at setup of test_nonmember_post _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a17c0840>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
____________________ ERROR at setup of test_invalid_message ____________________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a17a06a8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a17a0ea0>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________________ ERROR at setup of test_valid_message _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a17b72f0>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
____________________ ERROR at setup of test_nonmember_post _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a17b7730>

    @pytest.fixture
    def user_zerg(user_factory):
>       return user_factory('zerg.thedestroyer@zergworld.com', '!!qazwsx', 'lord', 'zerg')

http_tests/fixtures.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'zerg.thedestroyer@zergworld.com', password = '!!qazwsx'
name_first = 'lord', name_last = 'zerg'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
____________________ ERROR at setup of test_invalid_message ____________________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a17b7d08>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a17b7378>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
______________ ERROR at setup of test_successful_share_to_channel ______________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a174c8c8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
________________ ERROR at setup of test_successful_share_to_dm _________________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a174cc80>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________ ERROR at setup of test_successful_cross_share[True] ______________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a175c510>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________ ERROR at setup of test_successful_cross_share[False] _____________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a175c950>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
______________ ERROR at setup of test_cannot_share_to_unjoined_dm ______________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a175cd08>

    @pytest.fixture
    def user_zerg(user_factory):
>       return user_factory('zerg.thedestroyer@zergworld.com', '!!qazwsx', 'lord', 'zerg')

http_tests/fixtures.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'zerg.thedestroyer@zergworld.com', password = '!!qazwsx'
name_first = 'lord', name_last = 'zerg'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
___________ ERROR at setup of test_cannot_share_to_unjoined_channel ____________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a1775400>

    @pytest.fixture
    def user_zerg(user_factory):
>       return user_factory('zerg.thedestroyer@zergworld.com', '!!qazwsx', 'lord', 'zerg')

http_tests/fixtures.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'zerg.thedestroyer@zergworld.com', password = '!!qazwsx'
name_first = 'lord', name_last = 'zerg'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a1775c80>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
______________________ ERROR at setup of test_clear_works ______________________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a1775ae8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
______ ERROR at setup of test_tag_thru_message_send_triggers_notification ______

user_factory = <function user_factory.<locals>.make_user at 0x7f76a170e510>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____ ERROR at setup of test_tag_thru_message_senddm_triggers_notification _____

user_factory = <function user_factory.<locals>.make_user at 0x7f76a170ea60>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
______ ERROR at setup of test_tag_thru_message_edit_triggers_notification ______

user_factory = <function user_factory.<locals>.make_user at 0x7f76a170ef28>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____ ERROR at setup of test_tag_thru_message_share_triggers_notification ______

user_factory = <function user_factory.<locals>.make_user at 0x7f76a1715598>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_ ERROR at setup of test_tag_notification_message_preview_length[a small message] _

user_factory = <function user_factory.<locals>.make_user at 0x7f76a17152f0>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_ ERROR at setup of test_tag_notification_message_preview_length[AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA] _

user_factory = <function user_factory.<locals>.make_user at 0x7f76a1715f28>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_______ ERROR at setup of test_add_thru_ch_invite_triggers_notification ________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a173f2f0>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
______ ERROR at setup of test_add_thru_ch_addowner_triggers_notification _______

user_factory = <function user_factory.<locals>.make_user at 0x7f76a173fc80>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_______ ERROR at setup of test_add_thru_dm_create_triggers_notification ________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a173fae8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_______ ERROR at setup of test_add_thru_dm_invite_triggers_notification ________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a16cc730>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_________ ERROR at setup of test_most_recent_20_notifications_fetched __________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a16ccc80>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a16cc598>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
______________________ ERROR at setup of test_no_matches _______________________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a16d6840>

    @pytest.fixture
    def user_buzz(user_factory):
>       return user_factory('buzz.lightyear@starcommand.com', 'qazwsx@@', 'buzz', 'lightyear')

http_tests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'buzz.lightyear@starcommand.com', password = 'qazwsx@@'
name_first = 'buzz', name_last = 'lightyear'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________________ ERROR at setup of test_single_match ______________________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a16d6c80>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
___________________ ERROR at setup of test_multiple_matches ____________________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a16d67b8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_______________ ERROR at setup of test_multiple_channels_joined ________________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a16f0620>

    @pytest.fixture
    def user_zerg(user_factory):
>       return user_factory('zerg.thedestroyer@zergworld.com', '!!qazwsx', 'lord', 'zerg')

http_tests/fixtures.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'zerg.thedestroyer@zergworld.com', password = '!!qazwsx'
name_first = 'lord', name_last = 'zerg'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_________ ERROR at setup of test_search_includes_only_joined_channels __________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a16f0e18>

    @pytest.fixture
    def user_buzz(user_factory):
>       return user_factory('buzz.lightyear@starcommand.com', 'qazwsx@@', 'buzz', 'lightyear')

http_tests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'buzz.lightyear@starcommand.com', password = 'qazwsx@@'
name_first = 'buzz', name_last = 'lightyear'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____ ERROR at setup of test_search_matches_more_than_just_authorised_user _____

user_factory = <function user_factory.<locals>.make_user at 0x7f76a168b2f0>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_ ERROR at setup of test_invalid_search[aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa] _

user_factory = <function user_factory.<locals>.make_user at 0x7f76a168b950>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a168bd90>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_________________ ERROR at setup of test_successful_users_all __________________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a169d2f0>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a169d8c8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
__________________ ERROR at setup of test_user_profile_valid ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a169de18>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________________ ERROR at setup of test_invalid_user ______________________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a16ad378>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a16ad950>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
________________ ERROR at setup of test_successful_email_change ________________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a16add08>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________ ERROR at setup of test_cannot_change_to_taken_email ______________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a1647400>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
____________________ ERROR at setup of test_invalid_email[] ____________________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a1647840>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
__________________ ERROR at setup of test_invalid_email[bob] ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a1647ea0>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
______________ ERROR at setup of test_invalid_email[a@mgail.com] _______________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a165b510>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_________________ ERROR at setup of test_invalid_email[ab.com] _________________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a165ba60>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_______________ ERROR at setup of test_invalid_email[@gmail.com] _______________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a165bf28>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
____________ ERROR at setup of test_invalid_email[ab@ab@gmail.com] _____________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a166a400>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a166ab70>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_______________ ERROR at setup of test_successful_handle_change ________________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a166af28>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________ ERROR at setup of test_cannot_change_to_taken_handle _____________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a1608488>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
___________________ ERROR at setup of test_invalid_handle[] ____________________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a1608bf8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
___________________ ERROR at setup of test_invalid_handle[a] ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a1608268>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
__________________ ERROR at setup of test_invalid_handle[aa] ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a161a6a8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_________ ERROR at setup of test_invalid_handle[aaaaaaaaaaaaaaaaaaaaa] _________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a161abf8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a161af28>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
____________ ERROR at setup of test_user_profile_setname_valid_name ____________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a16297b8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
____________________ ERROR at setup of test_invalid_name[-] ____________________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a1629d08>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_ ERROR at setup of test_invalid_name[-MRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMR] _

user_factory = <function user_factory.<locals>.make_user at 0x7f76a1629048>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_ ERROR at setup of test_invalid_name[PotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHead-] _

user_factory = <function user_factory.<locals>.make_user at 0x7f76a15c77b8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_ ERROR at setup of test_invalid_name[PotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHead-MRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMR] _

user_factory = <function user_factory.<locals>.make_user at 0x7f76a15c7d08>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7f76a15ce2f0>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
=================================== FAILURES ===================================
______________ test_handle_generation_unique[Bob-Smith-bobsmith] _______________

name_first = 'Bob', name_last = 'Smith', expected_handle = 'bobsmith'
ctx = None

    @pytest.mark.parametrize('name_first, name_last, expected_handle', [
        ('Bob', 'Smith', 'bobsmith'),
        ('ab' * 5, 'cd' * 6, f'{"ab" * 5}{"cd" * 5}')
    ])
    def test_handle_generation_unique(name_first, name_last, expected_handle, ctx):
        session = auth_register('bob.jane@gmail.com', '~~qazwsx', name_first, name_last, ctx)
    
>       actual_handle = user_profile(session['token'], session['auth_user_id'], ctx)['user']['handle_str']
E       KeyError: 'user'

http_tests/auth_tests/test_auth_register.py:43: KeyError
_ test_handle_generation_unique[ababababab-cdcdcdcdcdcd-abababababcdcdcdcdcd] __

name_first = 'ababababab', name_last = 'cdcdcdcdcdcd'
expected_handle = 'abababababcdcdcdcdcd', ctx = None

    @pytest.mark.parametrize('name_first, name_last, expected_handle', [
        ('Bob', 'Smith', 'bobsmith'),
        ('ab' * 5, 'cd' * 6, f'{"ab" * 5}{"cd" * 5}')
    ])
    def test_handle_generation_unique(name_first, name_last, expected_handle, ctx):
        session = auth_register('bob.jane@gmail.com', '~~qazwsx', name_first, name_last, ctx)
    
>       actual_handle = user_profile(session['token'], session['auth_user_id'], ctx)['user']['handle_str']
E       KeyError: 'user'

http_tests/auth_tests/test_auth_register.py:43: KeyError
_______________________ test_handle_generation_duplicate _______________________

ctx = None

    def test_handle_generation_duplicate(ctx):
        auth_register('bob.jane@gmail.com', '~~qazwsx', 'ab' * 5, 'cd' * 6, ctx)
        session = auth_register('jane.bob@gmail.com', '~~qazwsx', 'ab' * 5, 'cd' * 6, ctx)
    
>       actual_handle = user_profile(session['token'], session['auth_user_id'], ctx)['user']['handle_str']
E       KeyError: 'user'

http_tests/auth_tests/test_auth_register.py:52: KeyError
=========================== short test summary info ============================
FAILED http_tests/auth_tests/test_auth_register.py::test_handle_generation_unique[Bob-Smith-bobsmith]
FAILED http_tests/auth_tests/test_auth_register.py::test_handle_generation_unique[ababababab-cdcdcdcdcdcd-abababababcdcdcdcdcd]
FAILED http_tests/auth_tests/test_auth_register.py::test_handle_generation_duplicate
ERROR http_tests/admin_tests/test_admin_user_remove.py::test_removal_can_do_no_action
ERROR http_tests/admin_tests/test_admin_user_remove.py::test_removal_messages_correct_format
ERROR http_tests/admin_tests/test_admin_user_remove.py::test_removal_profile_still_fetchable
ERROR http_tests/admin_tests/test_admin_user_remove.py::test_removal_removed_from_channel
ERROR http_tests/admin_tests/test_admin_user_remove.py::test_removal_removed_from_dm
ERROR http_tests/admin_tests/test_admin_user_remove.py::test_removal_not_in_users_all
ERROR http_tests/admin_tests/test_admin_user_remove.py::test_invalid_user - T...
ERROR http_tests/admin_tests/test_admin_user_remove.py::test_cannot_remove_last_owner
ERROR http_tests/admin_tests/test_admin_user_remove.py::test_cannot_remove_user_nonowner
ERROR http_tests/admin_tests/test_admin_user_remove.py::test_invalid_token - ...
ERROR http_tests/admin_tests/test_admin_userpermission_change.py::test_successful_permission_change
ERROR http_tests/admin_tests/test_admin_userpermission_change.py::test_changing_to_same_permission_idempotent
ERROR http_tests/admin_tests/test_admin_userpermission_change.py::test_nonowner_cant_change_permissions
ERROR http_tests/admin_tests/test_admin_userpermission_change.py::test_invalid_user
ERROR http_tests/admin_tests/test_admin_userpermission_change.py::test_invalid_permission
ERROR http_tests/admin_tests/test_admin_userpermission_change.py::test_invalid_token
ERROR http_tests/auth_tests/test_auth_login.py::test_successful_login - TypeE...
ERROR http_tests/auth_tests/test_auth_login.py::test_can_have_two_sessions - ...
ERROR http_tests/auth_tests/test_auth_login.py::test_registered_but_incorrect_password
ERROR http_tests/auth_tests/test_auth_logout.py::test_successful_logout - Typ...
ERROR http_tests/auth_tests/test_auth_logout.py::test_not_logged_in_logout - ...
ERROR http_tests/auth_tests/test_auth_register.py::test_successful_registration
ERROR http_tests/channel_tests/test_channel_addowner.py::test_global_owner_non_member_can_addowner
ERROR http_tests/channel_tests/test_channel_addowner.py::test_channel_owner_can_addowner_when_member
ERROR http_tests/channel_tests/test_channel_addowner.py::test_channel_owner_can_addowner_when_non_member
ERROR http_tests/channel_tests/test_channel_addowner.py::test_non_member_cannot_add_owner
ERROR http_tests/channel_tests/test_channel_addowner.py::test_member_cannot_add_owner
ERROR http_tests/channel_tests/test_channel_addowner.py::test_cannot_addowner_prexisting_channel_owner
ERROR http_tests/channel_tests/test_channel_addowner.py::test_with_invalid_channel_id
ERROR http_tests/channel_tests/test_channel_addowner.py::test_invalid_token
ERROR http_tests/channel_tests/test_channel_details.py::test_member_successful
ERROR http_tests/channel_tests/test_channel_details.py::test_non_member_not_successful
ERROR http_tests/channel_tests/test_channel_details.py::test_invalid_channel_id
ERROR http_tests/channel_tests/test_channel_details.py::test_invalid_token - ...
ERROR http_tests/channel_tests/test_channel_invite.py::test_invite_global_owner
ERROR http_tests/channel_tests/test_channel_invite.py::test_invite_global_member
ERROR http_tests/channel_tests/test_channel_invite.py::test_invitation_from_non_channel_member
ERROR http_tests/channel_tests/test_channel_invite.py::test_channel_id_invalid
ERROR http_tests/channel_tests/test_channel_invite.py::test_u_id_invalid - Ty...
ERROR http_tests/channel_tests/test_channel_invite.py::test_invalidated_token
ERROR http_tests/channel_tests/test_channel_join.py::test_global_owner_join_channel_public
ERROR http_tests/channel_tests/test_channel_join.py::test_global_owner_join_channel_private
ERROR http_tests/channel_tests/test_channel_join.py::test_global_member_join_public
ERROR http_tests/channel_tests/test_channel_join.py::test_join_invalid_channel_id
ERROR http_tests/channel_tests/test_channel_join.py::test_invalidated_token
ERROR http_tests/channel_tests/test_channel_leave.py::test_member_leave_channel_successfully
ERROR http_tests/channel_tests/test_channel_leave.py::test_leave_channel_when_not_member
ERROR http_tests/channel_tests/test_channel_leave.py::test_invalid_channel_id
ERROR http_tests/channel_tests/test_channel_leave.py::test_invalid_token - Ty...
ERROR http_tests/channel_tests/test_channel_messages.py::test_under_fifty_messages_sent
ERROR http_tests/channel_tests/test_channel_messages.py::test_over_fifty_messages_sent
ERROR http_tests/channel_tests/test_channel_messages.py::test_removal_by_edit_reflected
ERROR http_tests/channel_tests/test_channel_messages.py::test_removal_by_deletion_reflected
ERROR http_tests/channel_tests/test_channel_messages.py::test_input_error_when_start_greater_than_message_num
ERROR http_tests/channel_tests/test_channel_messages.py::test_access_error_when_user_is_non_member
ERROR http_tests/channel_tests/test_channel_messages.py::test_input_error_when_channel_id_invalid
ERROR http_tests/channel_tests/test_channel_messages.py::test_access_error_when_invalid_token_given
ERROR http_tests/channel_tests/test_channel_removeowner.py::test_owner_can_remove_owner
ERROR http_tests/channel_tests/test_channel_removeowner.py::test_global_owner_can_remove_owner
ERROR http_tests/channel_tests/test_channel_removeowner.py::test_nonmember_cannot_remove_owner
ERROR http_tests/channel_tests/test_channel_removeowner.py::test_member_cannot_remove_owner
ERROR http_tests/channel_tests/test_channel_removeowner.py::test_cannot_remove_last_owner
ERROR http_tests/channel_tests/test_channel_removeowner.py::test_cannot_remove_non_owner
ERROR http_tests/channel_tests/test_channel_removeowner.py::test_with_invalid_channel_id
ERROR http_tests/channel_tests/test_channel_removeowner.py::test_invalidated_token
ERROR http_tests/channels_tests/test_channels_create.py::test_create_channel[True-andys room]
ERROR http_tests/channels_tests/test_channels_create.py::test_create_channel[False-andys room]
ERROR http_tests/channels_tests/test_channels_create.py::test_channel_name_length[True-I AM NOT A TOY AND ALSO THIS NAME IS TOO LONG]
ERROR http_tests/channels_tests/test_channels_create.py::test_channel_name_length[False-I AM NOT A TOY AND ALSO THIS NAME IS TOO LONG]
ERROR http_tests/channels_tests/test_channels_create.py::test_invalidated_token
ERROR http_tests/channels_tests/test_channels_list.py::test_when_in_no_channels
ERROR http_tests/channels_tests/test_channels_list.py::test_when_in_one_channel[True-andy]
ERROR http_tests/channels_tests/test_channels_list.py::test_when_in_one_channel[False-andy]
ERROR http_tests/channels_tests/test_channels_list.py::test_when_in_multiple_channels[False-True-ZERG-andy]
ERROR http_tests/channels_tests/test_channels_list.py::test_when_in_multiple_channels[False-False-ZERG-andy]
ERROR http_tests/channels_tests/test_channels_list.py::test_when_in_multiple_channels[True-True-ZERG-andy]
ERROR http_tests/channels_tests/test_channels_list.py::test_when_in_multiple_channels[True-False-ZERG-andy]
ERROR http_tests/channels_tests/test_channels_list.py::test_list_after_leave_channel
ERROR http_tests/channels_tests/test_channels_list.py::test_invalidated_token
ERROR http_tests/channels_tests/test_channels_listall.py::test_when_no_channels
ERROR http_tests/channels_tests/test_channels_listall.py::test_when_one_channel_exists_private
ERROR http_tests/channels_tests/test_channels_listall.py::test_when_one_channel_exists_public
ERROR http_tests/channels_tests/test_channels_listall.py::test_when_multiple_channels_exist
ERROR http_tests/channels_tests/test_channels_listall.py::test_invalidated_token
ERROR http_tests/dm_tests/test_dm_create.py::test_successful_dm_creation - Ty...
ERROR http_tests/dm_tests/test_dm_create.py::test_dm_name_creation_single - T...
ERROR http_tests/dm_tests/test_dm_create.py::test_dm_name_creation_multiple
ERROR http_tests/dm_tests/test_dm_create.py::test_dm_to_invalid_user - TypeEr...
ERROR http_tests/dm_tests/test_dm_create.py::test_invalid_token - TypeError: ...
ERROR http_tests/dm_tests/test_dm_details.py::test_member_successful - TypeEr...
ERROR http_tests/dm_tests/test_dm_details.py::test_non_member_not_successful
ERROR http_tests/dm_tests/test_dm_details.py::test_invalid_dm_id - TypeError:...
ERROR http_tests/dm_tests/test_dm_details.py::test_invalid_token - TypeError:...
ERROR http_tests/dm_tests/test_dm_invite.py::test_invite_global_member - Type...
ERROR http_tests/dm_tests/test_dm_invite.py::test_invitation_from_non_dm_member
ERROR http_tests/dm_tests/test_dm_invite.py::test_dm_id_invalid - TypeError: ...
ERROR http_tests/dm_tests/test_dm_invite.py::test_u_id_invalid - TypeError: s...
ERROR http_tests/dm_tests/test_dm_invite.py::test_invalidated_token - TypeErr...
ERROR http_tests/dm_tests/test_dm_leave.py::test_member_leave_dm_successfully
ERROR http_tests/dm_tests/test_dm_leave.py::test_leave_channel_when_not_member
ERROR http_tests/dm_tests/test_dm_leave.py::test_invalid_dm_id - TypeError: s...
ERROR http_tests/dm_tests/test_dm_leave.py::test_invalid_token - TypeError: s...
ERROR http_tests/dm_tests/test_dm_list.py::test_when_in_no_dms - TypeError: s...
ERROR http_tests/dm_tests/test_dm_list.py::test_when_in_one_dm - TypeError: s...
ERROR http_tests/dm_tests/test_dm_list.py::test_when_in_multiple_dms - TypeEr...
ERROR http_tests/dm_tests/test_dm_list.py::test_list_after_leave_dm - TypeErr...
ERROR http_tests/dm_tests/test_dm_list.py::test_invalidated_token - TypeError...
ERROR http_tests/dm_tests/test_dm_messages.py::test_under_fifty_messages_sent
ERROR http_tests/dm_tests/test_dm_messages.py::test_over_fifty_messages_sent
ERROR http_tests/dm_tests/test_dm_messages.py::test_removal_by_edit_reflected
ERROR http_tests/dm_tests/test_dm_messages.py::test_removal_by_deletion_reflected
ERROR http_tests/dm_tests/test_dm_messages.py::test_input_error_when_start_greater_than_message_num
ERROR http_tests/dm_tests/test_dm_messages.py::test_access_error_when_user_is_non_member
ERROR http_tests/dm_tests/test_dm_messages.py::test_input_error_when_dm_id_invalid
ERROR http_tests/dm_tests/test_dm_messages.py::test_access_error_when_invalid_token_given
ERROR http_tests/dm_tests/test_dm_remove.py::test_successful_dm_removal - Typ...
ERROR http_tests/dm_tests/test_dm_remove.py::test_removal_removes_messages - ...
ERROR http_tests/dm_tests/test_dm_remove.py::test_nonowner_cannot_remove_dm
ERROR http_tests/dm_tests/test_dm_remove.py::test_invalid_dm_id - TypeError: ...
ERROR http_tests/dm_tests/test_dm_remove.py::test_invalid_token - TypeError: ...
ERROR http_tests/message_tests/test_message_edit.py::test_original_poster_can_edit_message
ERROR http_tests/message_tests/test_message_edit.py::test_owner_can_edit_members_message
ERROR http_tests/message_tests/test_message_edit.py::test_global_owner_can_edit_members_message
ERROR http_tests/message_tests/test_message_edit.py::test_empty_edit_deletes_message
ERROR http_tests/message_tests/test_message_edit.py::test_invalid_message_length
ERROR http_tests/message_tests/test_message_edit.py::test_cannot_edit_deleted_message
ERROR http_tests/message_tests/test_message_edit.py::test_nonowner_nonposter_cant_edit
ERROR http_tests/message_tests/test_message_edit.py::test_invalid_token - Typ...
ERROR http_tests/message_tests/test_message_remove.py::test_original_poster_can_remove_message
ERROR http_tests/message_tests/test_message_remove.py::test_owner_can_remove_members_message
ERROR http_tests/message_tests/test_message_remove.py::test_global_owner_can_remove_members_message
ERROR http_tests/message_tests/test_message_remove.py::test_cannot_remove_deleted_message
ERROR http_tests/message_tests/test_message_remove.py::test_nonowner_nonposter_cant_remove_message
ERROR http_tests/message_tests/test_message_remove.py::test_invalid_token - T...
ERROR http_tests/message_tests/test_message_send.py::test_valid_message - Typ...
ERROR http_tests/message_tests/test_message_send.py::test_nonmember_post - Ty...
ERROR http_tests/message_tests/test_message_send.py::test_invalid_message - T...
ERROR http_tests/message_tests/test_message_send.py::test_invalid_token - Typ...
ERROR http_tests/message_tests/test_message_senddm.py::test_valid_message - T...
ERROR http_tests/message_tests/test_message_senddm.py::test_nonmember_post - ...
ERROR http_tests/message_tests/test_message_senddm.py::test_invalid_message
ERROR http_tests/message_tests/test_message_senddm.py::test_invalid_token - T...
ERROR http_tests/message_tests/test_message_share.py::test_successful_share_to_channel
ERROR http_tests/message_tests/test_message_share.py::test_successful_share_to_dm
ERROR http_tests/message_tests/test_message_share.py::test_successful_cross_share[True]
ERROR http_tests/message_tests/test_message_share.py::test_successful_cross_share[False]
ERROR http_tests/message_tests/test_message_share.py::test_cannot_share_to_unjoined_dm
ERROR http_tests/message_tests/test_message_share.py::test_cannot_share_to_unjoined_channel
ERROR http_tests/message_tests/test_message_share.py::test_invalid_token - Ty...
ERROR http_tests/other_tests/test_clear.py::test_clear_works - TypeError: str...
ERROR http_tests/other_tests/test_notifications_get.py::test_tag_thru_message_send_triggers_notification
ERROR http_tests/other_tests/test_notifications_get.py::test_tag_thru_message_senddm_triggers_notification
ERROR http_tests/other_tests/test_notifications_get.py::test_tag_thru_message_edit_triggers_notification
ERROR http_tests/other_tests/test_notifications_get.py::test_tag_thru_message_share_triggers_notification
ERROR http_tests/other_tests/test_notifications_get.py::test_tag_notification_message_preview_length[a small message]
ERROR http_tests/other_tests/test_notifications_get.py::test_tag_notification_message_preview_length[AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA]
ERROR http_tests/other_tests/test_notifications_get.py::test_add_thru_ch_invite_triggers_notification
ERROR http_tests/other_tests/test_notifications_get.py::test_add_thru_ch_addowner_triggers_notification
ERROR http_tests/other_tests/test_notifications_get.py::test_add_thru_dm_create_triggers_notification
ERROR http_tests/other_tests/test_notifications_get.py::test_add_thru_dm_invite_triggers_notification
ERROR http_tests/other_tests/test_notifications_get.py::test_most_recent_20_notifications_fetched
ERROR http_tests/other_tests/test_notifications_get.py::test_invalid_token - ...
ERROR http_tests/other_tests/test_search.py::test_no_matches - TypeError: str...
ERROR http_tests/other_tests/test_search.py::test_single_match - TypeError: s...
ERROR http_tests/other_tests/test_search.py::test_multiple_matches - TypeErro...
ERROR http_tests/other_tests/test_search.py::test_multiple_channels_joined - ...
ERROR http_tests/other_tests/test_search.py::test_search_includes_only_joined_channels
ERROR http_tests/other_tests/test_search.py::test_search_matches_more_than_just_authorised_user
ERROR http_tests/other_tests/test_search.py::test_invalid_search[aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa]
ERROR http_tests/other_tests/test_search.py::test_invalid_token - TypeError: ...
ERROR http_tests/other_tests/test_users_all.py::test_successful_users_all - T...
ERROR http_tests/other_tests/test_users_all.py::test_invalid_token - TypeErro...
ERROR http_tests/user_tests/test_user_profile.py::test_user_profile_valid - T...
ERROR http_tests/user_tests/test_user_profile.py::test_invalid_user - TypeErr...
ERROR http_tests/user_tests/test_user_profile.py::test_invalid_token - TypeEr...
ERROR http_tests/user_tests/test_user_profile_setemail.py::test_successful_email_change
ERROR http_tests/user_tests/test_user_profile_setemail.py::test_cannot_change_to_taken_email
ERROR http_tests/user_tests/test_user_profile_setemail.py::test_invalid_email[]
ERROR http_tests/user_tests/test_user_profile_setemail.py::test_invalid_email[bob]
ERROR http_tests/user_tests/test_user_profile_setemail.py::test_invalid_email[a@mgail.com]
ERROR http_tests/user_tests/test_user_profile_setemail.py::test_invalid_email[ab.com]
ERROR http_tests/user_tests/test_user_profile_setemail.py::test_invalid_email[@gmail.com]
ERROR http_tests/user_tests/test_user_profile_setemail.py::test_invalid_email[ab@ab@gmail.com]
ERROR http_tests/user_tests/test_user_profile_setemail.py::test_invalid_token
ERROR http_tests/user_tests/test_user_profile_sethandle.py::test_successful_handle_change
ERROR http_tests/user_tests/test_user_profile_sethandle.py::test_cannot_change_to_taken_handle
ERROR http_tests/user_tests/test_user_profile_sethandle.py::test_invalid_handle[]
ERROR http_tests/user_tests/test_user_profile_sethandle.py::test_invalid_handle[a]
ERROR http_tests/user_tests/test_user_profile_sethandle.py::test_invalid_handle[aa]
ERROR http_tests/user_tests/test_user_profile_sethandle.py::test_invalid_handle[aaaaaaaaaaaaaaaaaaaaa]
ERROR http_tests/user_tests/test_user_profile_sethandle.py::test_invalid_token
ERROR http_tests/user_tests/test_user_profile_setname.py::test_user_profile_setname_valid_name
ERROR http_tests/user_tests/test_user_profile_setname.py::test_invalid_name[-]
ERROR http_tests/user_tests/test_user_profile_setname.py::test_invalid_name[-MRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMR]
ERROR http_tests/user_tests/test_user_profile_setname.py::test_invalid_name[PotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHead-]
ERROR http_tests/user_tests/test_user_profile_setname.py::test_invalid_name[PotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHead-MRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMR]
ERROR http_tests/user_tests/test_user_profile_setname.py::test_invalid_token
============ 3 failed, 28 passed, 19 skipped, 197 errors in 10.41s =============
