============================= test session starts ==============================
platform linux -- Python 3.7.3, pytest-6.2.3, py-1.10.0, pluggy-0.13.1
rootdir: /tmp_amd/kamen/export/kamen/3/cs1531/automark/tempstore, configfile: pytest.ini
plugins: forked-1.3.0, xdist-2.2.1, hypothesis-6.1.1, timeout-1.4.2
collected 343 items

http_tests/admin_tests/test_admin_user_remove.py EEEEEEsEEEE             [  3%]
http_tests/admin_tests/test_admin_userpermission_change.py EEEEEE        [  4%]
http_tests/auth_tests/test_auth_login.py EE.E                            [  6%]
http_tests/auth_tests/test_auth_logout.py EE                             [  6%]
http_tests/auth_tests/test_auth_register.py .........................EFF [ 14%]
F                                                                        [ 15%]
http_tests/auth_tests/test_passwordreset_request.py EEs                  [ 16%]
http_tests/auth_tests/test_passwordreset_reset.py ..                     [ 16%]
http_tests/channel_tests/test_channel_addowner.py sEsEEEsEE              [ 19%]
http_tests/channel_tests/test_channel_details.py EEEE                    [ 20%]
http_tests/channel_tests/test_channel_invite.py sEEEEEE                  [ 22%]
http_tests/channel_tests/test_channel_join.py EEEsEE                     [ 24%]
http_tests/channel_tests/test_channel_leave.py EEEE                      [ 25%]
http_tests/channel_tests/test_channel_messages.py EEEEEEEE               [ 27%]
http_tests/channel_tests/test_channel_removeowner.py EEEEEEsEE           [ 30%]
http_tests/channels_tests/test_channels_create.py EEEEE                  [ 31%]
http_tests/channels_tests/test_channels_list.py EEEEEEEEE                [ 34%]
http_tests/channels_tests/test_channels_listall.py EEEEE                 [ 35%]
http_tests/dm_tests/test_dm_create.py EEEEE                              [ 37%]
http_tests/dm_tests/test_dm_details.py EEEE                              [ 38%]
http_tests/dm_tests/test_dm_invite.py sEEEEE                             [ 40%]
http_tests/dm_tests/test_dm_leave.py EEEE                                [ 41%]
http_tests/dm_tests/test_dm_list.py EEEEE                                [ 42%]
http_tests/dm_tests/test_dm_messages.py EEEEEEEE                         [ 45%]
http_tests/dm_tests/test_dm_remove.py EEEEE                              [ 46%]
http_tests/echo_tests/echo_test.py ..                                    [ 47%]
http_tests/message_tests/test_message_edit.py EEEEEEEE                   [ 49%]
http_tests/message_tests/test_message_meta.py E                          [ 49%]
http_tests/message_tests/test_message_pin.py EEEEEEEE                    [ 52%]
http_tests/message_tests/test_message_react.py EEEEEEE                   [ 54%]
http_tests/message_tests/test_message_remove.py EEEEEE                   [ 55%]
http_tests/message_tests/test_message_send.py EEsEE                      [ 57%]
http_tests/message_tests/test_message_senddm.py EEsEE                    [ 58%]
http_tests/message_tests/test_message_sendlater.py EEEEEE                [ 60%]
http_tests/message_tests/test_message_sendlaterdm.py EEEEEE              [ 62%]
http_tests/message_tests/test_message_share.py EEEEEEssssssE             [ 66%]
http_tests/message_tests/test_message_unpin.py EEEEEEEE                  [ 68%]
http_tests/message_tests/test_message_unreact.py EEEEEEE                 [ 70%]
http_tests/other_tests/test_clear.py E                                   [ 70%]
http_tests/other_tests/test_notifications_get.py EEsssEEEEEEEsEEEE       [ 75%]
http_tests/other_tests/test_search.py EEEEEEEE                           [ 78%]
http_tests/other_tests/test_users_all.py EE                              [ 78%]
http_tests/standup_tests/test_standup_active.py EEEEEE                   [ 80%]
http_tests/standup_tests/test_standup_send.py EEEEEEE                    [ 82%]
http_tests/standup_tests/test_standup_start.py EEEsEEEEE                 [ 85%]
http_tests/stats_tests/test_user_stats.py EEEEEEEEEEEEEEEEEE             [ 90%]
http_tests/user_tests/test_user_profile.py EEE                           [ 91%]
http_tests/user_tests/test_user_profile_setemail.py EEEEEEEEE            [ 93%]
http_tests/user_tests/test_user_profile_sethandle.py EEEEEEE             [ 95%]
http_tests/user_tests/test_user_profile_setname.py EEEEEE                [ 97%]
http_tests/user_tests/test_user_profile_uploadphoto.py EEEEEEEE          [100%]

==================================== ERRORS ====================================
_______________ ERROR at setup of test_removal_can_do_no_action ________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a87dd840>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
____________ ERROR at setup of test_removal_messages_correct_format ____________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a875af28>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
____________ ERROR at setup of test_removal_profile_still_fetchable ____________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a874c598>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________ ERROR at setup of test_removal_removed_from_channel ______________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a874cae8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
________________ ERROR at setup of test_removal_removed_from_dm ________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a874cf28>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_______________ ERROR at setup of test_removal_not_in_users_all ________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a8796620>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________________ ERROR at setup of test_invalid_user ______________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a87969d8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_______________ ERROR at setup of test_cannot_remove_last_owner ________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a87968c8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
______________ ERROR at setup of test_cannot_remove_user_nonowner ______________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a877f6a8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a877fa60>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________ ERROR at setup of test_successful_permission_change ______________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a877fd08>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
________ ERROR at setup of test_changing_to_same_permission_idempotent _________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a8768840>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
___________ ERROR at setup of test_nonowner_cant_change_permissions ____________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a8768c80>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________________ ERROR at setup of test_invalid_user ______________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a87687b8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
__________________ ERROR at setup of test_invalid_permission ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a86897b8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a8689d08>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
___________________ ERROR at setup of test_successful_login ____________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a8689620>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_________________ ERROR at setup of test_can_have_two_sessions _________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a86816a8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
___________ ERROR at setup of test_registered_but_incorrect_password ___________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a8681488>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
___________________ ERROR at setup of test_successful_logout ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a86fe2f0>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_________________ ERROR at setup of test_not_logged_in_logout __________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a86fe730>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
________________ ERROR at setup of test_successful_registration ________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a86fed08>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_________________ ERROR at setup of test_return_format_correct _________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a8713158>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_________ ERROR at setup of test_password_request_logs_out_everywhere __________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a8713f28>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
________ ERROR at setup of test_channel_owner_can_addowner_when_member _________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a86eb598>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
______________ ERROR at setup of test_non_member_cannot_add_owner ______________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a86eba60>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
________________ ERROR at setup of test_member_cannot_add_owner ________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a86ebf28>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_______ ERROR at setup of test_cannot_addowner_prexisting_channel_owner ________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a8713268>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
________________ ERROR at setup of test_with_invalid_channel_id ________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a86348c8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a8634f28>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
___________________ ERROR at setup of test_member_successful ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a8640620>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_______________ ERROR at setup of test_non_member_not_successful _______________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a8640bf8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
__________________ ERROR at setup of test_invalid_channel_id ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a8640b70>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a864e6a8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
__________________ ERROR at setup of test_invite_global_owner __________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a864ea60>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_________________ ERROR at setup of test_invite_global_member __________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a864e268>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
__________ ERROR at setup of test_invitation_from_non_channel_member ___________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a863b730>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
__________________ ERROR at setup of test_channel_id_invalid ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a863bc80>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________________ ERROR at setup of test_u_id_invalid ______________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a863b598>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
___________________ ERROR at setup of test_invalidated_token ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a8605598>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
___________ ERROR at setup of test_global_owner_join_channel_public ____________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a8605d90>

    @pytest.fixture
    def user_buzz(user_factory):
>       return user_factory('buzz.lightyear@starcommand.com', 'qazwsx@@', 'buzz', 'lightyear')

http_tests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'buzz.lightyear@starcommand.com', password = 'qazwsx@@'
name_first = 'buzz', name_last = 'lightyear'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
___________ ERROR at setup of test_global_owner_join_channel_private ___________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a8605488>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_______________ ERROR at setup of test_global_member_join_public _______________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a861a7b8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
________________ ERROR at setup of test_join_invalid_channel_id ________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a861aa60>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
___________________ ERROR at setup of test_invalidated_token ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a85b02f0>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
___________ ERROR at setup of test_member_leave_channel_successfully ___________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a85b0950>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________ ERROR at setup of test_leave_channel_when_not_member _____________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a85b0b70>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
__________________ ERROR at setup of test_invalid_channel_id ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a85b0c80>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a85be8c8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_______________ ERROR at setup of test_under_fifty_messages_sent _______________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a85bed08>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_______________ ERROR at setup of test_over_fifty_messages_sent ________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a85be840>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_______________ ERROR at setup of test_removal_by_edit_reflected _______________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a85ce840>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________ ERROR at setup of test_removal_by_deletion_reflected _____________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a85ced90>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
____ ERROR at setup of test_input_error_when_start_greater_than_message_num ____

user_factory = <function user_factory.<locals>.make_user at 0x7f71a85e2048>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_________ ERROR at setup of test_access_error_when_user_is_non_member __________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a85e2730>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
__________ ERROR at setup of test_input_error_when_channel_id_invalid __________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a85e2d08>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_________ ERROR at setup of test_access_error_when_invalid_token_given _________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a8577400>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
________________ ERROR at setup of test_owner_can_remove_owner _________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a8577a60>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________ ERROR at setup of test_global_owner_can_remove_owner _____________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a8577840>

    @pytest.fixture
    def user_zerg(user_factory):
>       return user_factory('zerg.thedestroyer@zergworld.com', '!!qazwsx', 'lord', 'zerg')

http_tests/fixtures.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'zerg.thedestroyer@zergworld.com', password = '!!qazwsx'
name_first = 'lord', name_last = 'zerg'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________ ERROR at setup of test_nonmember_cannot_remove_owner _____________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a8585510>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
______________ ERROR at setup of test_member_cannot_remove_owner _______________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a8585ae8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_______________ ERROR at setup of test_cannot_remove_last_owner ________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a8585378>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
________________ ERROR at setup of test_cannot_remove_non_owner ________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a859c510>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
________________ ERROR at setup of test_with_invalid_channel_id ________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a859c8c8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
___________________ ERROR at setup of test_invalidated_token ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a859cf28>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
____________ ERROR at setup of test_create_channel[True-andys room] ____________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a85b3598>

    @pytest.fixture
    def user_zerg(user_factory):
>       return user_factory('zerg.thedestroyer@zergworld.com', '!!qazwsx', 'lord', 'zerg')

http_tests/fixtures.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'zerg.thedestroyer@zergworld.com', password = '!!qazwsx'
name_first = 'lord', name_last = 'zerg'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
___________ ERROR at setup of test_create_channel[False-andys room] ____________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a85b3950>

    @pytest.fixture
    def user_zerg(user_factory):
>       return user_factory('zerg.thedestroyer@zergworld.com', '!!qazwsx', 'lord', 'zerg')

http_tests/fixtures.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'zerg.thedestroyer@zergworld.com', password = '!!qazwsx'
name_first = 'lord', name_last = 'zerg'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_ ERROR at setup of test_channel_name_length[True-I AM NOT A TOY AND ALSO THIS NAME IS TOO LONG] _

user_factory = <function user_factory.<locals>.make_user at 0x7f71a85b3f28>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_ ERROR at setup of test_channel_name_length[False-I AM NOT A TOY AND ALSO THIS NAME IS TOO LONG] _

user_factory = <function user_factory.<locals>.make_user at 0x7f71a854a620>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
___________________ ERROR at setup of test_invalidated_token ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a854a9d8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
__________________ ERROR at setup of test_when_in_no_channels __________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a854a8c8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
____________ ERROR at setup of test_when_in_one_channel[True-andy] _____________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a85627b8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
____________ ERROR at setup of test_when_in_one_channel[False-andy] ____________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a8562bf8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
____ ERROR at setup of test_when_in_multiple_channels[False-True-ZERG-andy] ____

user_factory = <function user_factory.<locals>.make_user at 0x7f71a8562a60>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
___ ERROR at setup of test_when_in_multiple_channels[False-False-ZERG-andy] ____

user_factory = <function user_factory.<locals>.make_user at 0x7f71a84f2730>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
____ ERROR at setup of test_when_in_multiple_channels[True-True-ZERG-andy] _____

user_factory = <function user_factory.<locals>.make_user at 0x7f71a84f2c80>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
____ ERROR at setup of test_when_in_multiple_channels[True-False-ZERG-andy] ____

user_factory = <function user_factory.<locals>.make_user at 0x7f71a84f2598>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_______________ ERROR at setup of test_list_after_leave_channel ________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a85097b8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
___________________ ERROR at setup of test_invalidated_token ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a8509b70>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
___________________ ERROR at setup of test_when_no_channels ____________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a8509620>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
____________ ERROR at setup of test_when_one_channel_exists_private ____________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a85248c8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
____________ ERROR at setup of test_when_one_channel_exists_public _____________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a8524ea0>

    @pytest.fixture
    def user_zerg(user_factory):
>       return user_factory('zerg.thedestroyer@zergworld.com', '!!qazwsx', 'lord', 'zerg')

http_tests/fixtures.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'zerg.thedestroyer@zergworld.com', password = '!!qazwsx'
name_first = 'lord', name_last = 'zerg'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________ ERROR at setup of test_when_multiple_channels_exist ______________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a84ae2f0>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
___________________ ERROR at setup of test_invalidated_token ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a84ae730>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
________________ ERROR at setup of test_successful_dm_creation _________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a84aeea0>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
________________ ERROR at setup of test_dm_name_creation_single ________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a84c3378>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_______________ ERROR at setup of test_dm_name_creation_multiple _______________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a84c37b8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
__________________ ERROR at setup of test_dm_to_invalid_user ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a84c3d90>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a84da400>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
___________________ ERROR at setup of test_member_successful ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a84da9d8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_______________ ERROR at setup of test_non_member_not_successful _______________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a84da488>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________________ ERROR at setup of test_invalid_dm_id _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a84da730>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a846fa60>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_________________ ERROR at setup of test_invite_global_member __________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a846ff28>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________ ERROR at setup of test_invitation_from_non_dm_member _____________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a8489620>

    @pytest.fixture
    def user_zerg(user_factory):
>       return user_factory('zerg.thedestroyer@zergworld.com', '!!qazwsx', 'lord', 'zerg')

http_tests/fixtures.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'zerg.thedestroyer@zergworld.com', password = '!!qazwsx'
name_first = 'lord', name_last = 'zerg'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________________ ERROR at setup of test_dm_id_invalid _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a8489bf8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________________ ERROR at setup of test_u_id_invalid ______________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a8489f28>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
___________________ ERROR at setup of test_invalidated_token ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a849d620>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________ ERROR at setup of test_member_leave_dm_successfully ______________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a849d9d8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________ ERROR at setup of test_leave_channel_when_not_member _____________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a849d488>

    @pytest.fixture
    def user_zerg(user_factory):
>       return user_factory('zerg.thedestroyer@zergworld.com', '!!qazwsx', 'lord', 'zerg')

http_tests/fixtures.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'zerg.thedestroyer@zergworld.com', password = '!!qazwsx'
name_first = 'lord', name_last = 'zerg'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________________ ERROR at setup of test_invalid_dm_id _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a84337b8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a8433bf8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
____________________ ERROR at setup of test_when_in_no_dms _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a8433a60>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
____________________ ERROR at setup of test_when_in_one_dm _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a8446730>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_________________ ERROR at setup of test_when_in_multiple_dms __________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a8446c80>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
__________________ ERROR at setup of test_list_after_leave_dm __________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a8446598>

    @pytest.fixture
    def user_buzz(user_factory):
>       return user_factory('buzz.lightyear@starcommand.com', 'qazwsx@@', 'buzz', 'lightyear')

http_tests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'buzz.lightyear@starcommand.com', password = 'qazwsx@@'
name_first = 'buzz', name_last = 'lightyear'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
___________________ ERROR at setup of test_invalidated_token ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a845d7b8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_______________ ERROR at setup of test_under_fifty_messages_sent _______________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a845db70>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_______________ ERROR at setup of test_over_fifty_messages_sent ________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a83ed2f0>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_______________ ERROR at setup of test_removal_by_edit_reflected _______________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a83ed8c8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________ ERROR at setup of test_removal_by_deletion_reflected _____________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a83ede18>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
____ ERROR at setup of test_input_error_when_start_greater_than_message_num ____

user_factory = <function user_factory.<locals>.make_user at 0x7f71a83fe378>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_________ ERROR at setup of test_access_error_when_user_is_non_member __________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a83fe9d8>

    @pytest.fixture
    def user_zerg(user_factory):
>       return user_factory('zerg.thedestroyer@zergworld.com', '!!qazwsx', 'lord', 'zerg')

http_tests/fixtures.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'zerg.thedestroyer@zergworld.com', password = '!!qazwsx'
name_first = 'lord', name_last = 'zerg'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
____________ ERROR at setup of test_input_error_when_dm_id_invalid _____________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a83fee18>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_________ ERROR at setup of test_access_error_when_invalid_token_given _________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a8415378>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_________________ ERROR at setup of test_successful_dm_removal _________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a8415950>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_______________ ERROR at setup of test_removal_removes_messages ________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a84156a8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_______________ ERROR at setup of test_nonowner_cannot_remove_dm _______________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a83ae510>

    @pytest.fixture
    def user_buzz(user_factory):
>       return user_factory('buzz.lightyear@starcommand.com', 'qazwsx@@', 'buzz', 'lightyear')

http_tests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'buzz.lightyear@starcommand.com', password = 'qazwsx@@'
name_first = 'buzz', name_last = 'lightyear'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________________ ERROR at setup of test_invalid_dm_id _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a83aeae8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a83ae378>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
___________ ERROR at setup of test_original_poster_can_edit_message ____________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a83ba510>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
____________ ERROR at setup of test_owner_can_edit_members_message _____________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a83baa60>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_________ ERROR at setup of test_global_owner_can_edit_members_message _________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a83baf28>

    @pytest.fixture
    def user_zerg(user_factory):
>       return user_factory('zerg.thedestroyer@zergworld.com', '!!qazwsx', 'lord', 'zerg')

http_tests/fixtures.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'zerg.thedestroyer@zergworld.com', password = '!!qazwsx'
name_first = 'lord', name_last = 'zerg'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
______________ ERROR at setup of test_empty_edit_deletes_message _______________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a83d56a8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
________________ ERROR at setup of test_invalid_message_length _________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a83d5950>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
______________ ERROR at setup of test_cannot_edit_deleted_message ______________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a83d5f28>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________ ERROR at setup of test_nonowner_nonposter_cant_edit ______________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a836a620>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a836ab70>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
__________________ ERROR at setup of test_message_ids_unique ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a836a9d8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_______________ ERROR at setup of test_successful_pin_in_channel _______________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a83737b8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_________________ ERROR at setup of test_successful_pin_in_dm __________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a8373a60>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
__________________ ERROR at setup of test_invalid_message_id ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a8373730>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
___________________ ERROR at setup of test_cannot_pin_twice ____________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a8398840>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
________________ ERROR at setup of test_channel_member_cant_pin ________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a8398ae8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
__________________ ERROR at setup of test_dm_member_cant_pin ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a8398d90>

    @pytest.fixture
    def user_buzz(user_factory):
>       return user_factory('buzz.lightyear@starcommand.com', 'qazwsx@@', 'buzz', 'lightyear')

http_tests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'buzz.lightyear@starcommand.com', password = 'qazwsx@@'
name_first = 'buzz', name_last = 'lightyear'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
__________________ ERROR at setup of test_nonmember_cant_pin ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a8330840>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a8330e18>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
______________ ERROR at setup of test_successful_react_in_channel ______________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a83306a8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
____________ ERROR at setup of test_successful_react_to_dm_message _____________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a8339840>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
__________________ ERROR at setup of test_invalid_message_id ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a8339bf8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
___________________ ERROR at setup of test_invalid_react_id ____________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a8352378>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
___________________ ERROR at setup of test_cant_react_twice ____________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a8352950>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
________________ ERROR at setup of test_nonmember_cannot_react _________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a8352d08>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a82e7378>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
__________ ERROR at setup of test_original_poster_can_remove_message ___________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a82e77b8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
___________ ERROR at setup of test_owner_can_remove_members_message ____________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a82e7d90>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
________ ERROR at setup of test_global_owner_can_remove_members_message ________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a82f9488>

    @pytest.fixture
    def user_zerg(user_factory):
>       return user_factory('zerg.thedestroyer@zergworld.com', '!!qazwsx', 'lord', 'zerg')

http_tests/fixtures.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'zerg.thedestroyer@zergworld.com', password = '!!qazwsx'
name_first = 'lord', name_last = 'zerg'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________ ERROR at setup of test_cannot_remove_deleted_message _____________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a82f9ae8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
________ ERROR at setup of test_nonowner_nonposter_cant_remove_message _________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a82f9e18>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a830e620>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________________ ERROR at setup of test_valid_message _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a830ea60>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
____________________ ERROR at setup of test_nonmember_post _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a830ef28>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
____________________ ERROR at setup of test_invalid_message ____________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a82aa400>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a82aabf8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________________ ERROR at setup of test_valid_message _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a82aaf28>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
____________________ ERROR at setup of test_nonmember_post _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a82c5488>

    @pytest.fixture
    def user_zerg(user_factory):
>       return user_factory('zerg.thedestroyer@zergworld.com', '!!qazwsx', 'lord', 'zerg')

http_tests/fixtures.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'zerg.thedestroyer@zergworld.com', password = '!!qazwsx'
name_first = 'lord', name_last = 'zerg'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
____________________ ERROR at setup of test_invalid_message ____________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a82c5a60>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a82c5d08>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_________________ ERROR at setup of test_valid_future_message __________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a82d66a8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_______________ ERROR at setup of test_nonmeber_cannot_sendlater _______________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a82d6bf8>

    @pytest.fixture
    def user_buzz(user_factory):
>       return user_factory('buzz.lightyear@starcommand.com', 'qazwsx@@', 'buzz', 'lightyear')

http_tests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'buzz.lightyear@starcommand.com', password = 'qazwsx@@'
name_first = 'buzz', name_last = 'lightyear'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
__________________ ERROR at setup of test_cannot_time_travel ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a82d6f28>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
___________________ ERROR at setup of test_message_too_long ____________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a826e7b8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
____________________ ERROR at setup of test_invalid_channel ____________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a826ed08>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a826e400>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_________________ ERROR at setup of test_valid_future_message __________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a82818c8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_______________ ERROR at setup of test_nonmeber_cannot_sendlater _______________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a8281d08>

    @pytest.fixture
    def user_zerg(user_factory):
>       return user_factory('zerg.thedestroyer@zergworld.com', '!!qazwsx', 'lord', 'zerg')

http_tests/fixtures.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'zerg.thedestroyer@zergworld.com', password = '!!qazwsx'
name_first = 'lord', name_last = 'zerg'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
__________________ ERROR at setup of test_cannot_time_travel ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a8281840>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
___________________ ERROR at setup of test_message_too_long ____________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a82936a8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
______________________ ERROR at setup of test_invalid_dm _______________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a8293e18>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a8293598>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
______________ ERROR at setup of test_successful_share_to_channel ______________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a825b9d8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
________________ ERROR at setup of test_successful_share_to_dm _________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a825bc80>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________ ERROR at setup of test_successful_cross_share[True] ______________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a823e378>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________ ERROR at setup of test_successful_cross_share[False] _____________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a823e950>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
______________ ERROR at setup of test_cannot_share_to_unjoined_dm ______________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a823ed08>

    @pytest.fixture
    def user_zerg(user_factory):
>       return user_factory('zerg.thedestroyer@zergworld.com', '!!qazwsx', 'lord', 'zerg')

http_tests/fixtures.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'zerg.thedestroyer@zergworld.com', password = '!!qazwsx'
name_first = 'lord', name_last = 'zerg'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
___________ ERROR at setup of test_cannot_share_to_unjoined_channel ____________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a8252400>

    @pytest.fixture
    def user_zerg(user_factory):
>       return user_factory('zerg.thedestroyer@zergworld.com', '!!qazwsx', 'lord', 'zerg')

http_tests/fixtures.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'zerg.thedestroyer@zergworld.com', password = '!!qazwsx'
name_first = 'lord', name_last = 'zerg'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a8252c80>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
______________ ERROR at setup of test_successful_unpin_in_channel ______________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a8252ae8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
________________ ERROR at setup of test_successful_unpin_in_dm _________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a81f5378>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
__________________ ERROR at setup of test_invalid_message_id ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a81f5ae8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
__________________ ERROR at setup of test_cannot_unpin_twice ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a81f5f28>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_______________ ERROR at setup of test_channel_member_cant_unpin _______________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a82036a8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_________________ ERROR at setup of test_dm_member_cant_unpin __________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a8203950>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_________________ ERROR at setup of test_nonmember_cant_unpin __________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a8203488>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a8213730>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________ ERROR at setup of test_successful_unreact_in_channel _____________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a8213b70>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
___________ ERROR at setup of test_successful_unreact_to_dm_message ____________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a82138c8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
__________________ ERROR at setup of test_invalid_message_id ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a81a9510>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
___________________ ERROR at setup of test_invalid_react_id ____________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a81a9c80>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
__________________ ERROR at setup of test_cant_unreact_twice ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a81a9400>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_______________ ERROR at setup of test_nonmember_cannot_unreact ________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a81bc840>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a81bcae8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
______________________ ERROR at setup of test_clear_works ______________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a81bc7b8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
______ ERROR at setup of test_tag_thru_message_send_triggers_notification ______

user_factory = <function user_factory.<locals>.make_user at 0x7f71a81d67b8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____ ERROR at setup of test_tag_thru_message_senddm_triggers_notification _____

user_factory = <function user_factory.<locals>.make_user at 0x7f71a81d6d08>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
___ ERROR at setup of test_tag_thru_message_sendlater_triggers_notification ____

user_factory = <function user_factory.<locals>.make_user at 0x7f71a816f400>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
__ ERROR at setup of test_tag_thru_message_sendlaterdm_triggers_notification ___

user_factory = <function user_factory.<locals>.make_user at 0x7f71a816f950>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_ ERROR at setup of test_tag_notification_message_preview_length[a small message] _

user_factory = <function user_factory.<locals>.make_user at 0x7f71a816fd90>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_ ERROR at setup of test_tag_notification_message_preview_length[AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA] _

user_factory = <function user_factory.<locals>.make_user at 0x7f71a8180048>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
____________ ERROR at setup of test_react_triggers_notification[ch] ____________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a81808c8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
____________ ERROR at setup of test_react_triggers_notification[dm] ____________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a8180e18>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_______ ERROR at setup of test_add_thru_ch_invite_triggers_notification ________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a8192400>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_______ ERROR at setup of test_add_thru_dm_create_triggers_notification ________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a8192840>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_______ ERROR at setup of test_add_thru_dm_invite_triggers_notification ________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a8192ea0>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_________ ERROR at setup of test_most_recent_20_notifications_fetched __________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a81a5510>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a81a5a60>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
______________________ ERROR at setup of test_no_matches _______________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a81a5ea0>

    @pytest.fixture
    def user_buzz(user_factory):
>       return user_factory('buzz.lightyear@starcommand.com', 'qazwsx@@', 'buzz', 'lightyear')

http_tests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'buzz.lightyear@starcommand.com', password = 'qazwsx@@'
name_first = 'buzz', name_last = 'lightyear'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________________ ERROR at setup of test_single_match ______________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a8138510>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
___________________ ERROR at setup of test_multiple_matches ____________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a8138a60>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_______________ ERROR at setup of test_multiple_channels_joined ________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a8138f28>

    @pytest.fixture
    def user_zerg(user_factory):
>       return user_factory('zerg.thedestroyer@zergworld.com', '!!qazwsx', 'lord', 'zerg')

http_tests/fixtures.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'zerg.thedestroyer@zergworld.com', password = '!!qazwsx'
name_first = 'lord', name_last = 'zerg'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_________ ERROR at setup of test_search_includes_only_joined_channels __________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a81486a8>

    @pytest.fixture
    def user_buzz(user_factory):
>       return user_factory('buzz.lightyear@starcommand.com', 'qazwsx@@', 'buzz', 'lightyear')

http_tests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'buzz.lightyear@starcommand.com', password = 'qazwsx@@'
name_first = 'buzz', name_last = 'lightyear'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____ ERROR at setup of test_search_matches_more_than_just_authorised_user _____

user_factory = <function user_factory.<locals>.make_user at 0x7f71a8148950>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_ ERROR at setup of test_invalid_search[aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa] _

user_factory = <function user_factory.<locals>.make_user at 0x7f71a8148f28>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a80e7620>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_________________ ERROR at setup of test_successful_users_all __________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a80e7b70>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a80e78c8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
______________ ERROR at setup of test_correct_return_format[True] ______________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a80f96a8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________ ERROR at setup of test_correct_return_format[False] ______________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a80f9bf8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
____________________ ERROR at setup of test_active_standup _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a80f9f28>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
___________________ ERROR at setup of test_inactive_standup ____________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a810e7b8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
__________________ ERROR at setup of test_invalid_channel_id ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a810ed08>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a810ee18>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_______ ERROR at setup of test_messages_buffered_and_displayed_correctly _______

user_factory = <function user_factory.<locals>.make_user at 0x7f71a80a7620>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________________ ERROR at setup of test_return_format _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a80a7e18>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
____________ ERROR at setup of test_non_member_cannot_standup_send _____________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a80a7400>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
______________ ERROR at setup of test_send_when_standup_inactive _______________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a80b6840>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
________________ ERROR at setup of test_invalid_message_length _________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a80b6bf8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
__________________ ERROR at setup of test_invalid_channel_id ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a80c8378>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a80c89d8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
______________ ERROR at setup of test_standup_start_return_format ______________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a80c8e18>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
____________ ERROR at setup of test_standup_restartable_after_lapse ____________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a80e4378>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
___________ ERROR at setup of test_standup_affects_only_one_channel ____________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a80e4950>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
____________ ERROR at setup of test_standup_cannot_be_started_in_dm ____________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a80e46a8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
____________ ERROR at setup of test_nonmember_cannot_start_standup _____________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a8073598>

    @pytest.fixture
    def user_buzz(user_factory):
>       return user_factory('buzz.lightyear@starcommand.com', 'qazwsx@@', 'buzz', 'lightyear')

http_tests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'buzz.lightyear@starcommand.com', password = 'qazwsx@@'
name_first = 'buzz', name_last = 'lightyear'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_______ ERROR at setup of test_cannot_start_standup_when_already_active ________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a8073840>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
__________________ ERROR at setup of test_invalid_channel_id ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a8073f28>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a808b620>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
__________________ ERROR at setup of test_return_type_correct __________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a808ba60>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
___________ ERROR at setup of test_channels_tracked_channels_create ____________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a808bf28>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________ ERROR at setup of test_channels_tracked_channel_join _____________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a80a1598>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
____________ ERROR at setup of test_channels_tracked_channel_invite ____________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a80a1ae8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
____________ ERROR at setup of test_channels_tracked_channel_leave _____________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a80a1f28>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
__________ ERROR at setup of test_channels_tracked_channel_add_owner ___________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a8031620>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_________________ ERROR at setup of test_dms_tracked_dm_create _________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a80319d8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_________________ ERROR at setup of test_dms_tracked_dm_invite _________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a8031488>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_________________ ERROR at setup of test_dms_tracked_dm_leave __________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a8044730>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_________________ ERROR at setup of test_dms_tracked_dm_remove _________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a8044c80>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________ ERROR at setup of test_messages_tracked_message_send _____________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a80442f0>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
__________ ERROR at setup of test_messages_tracked_message_sendlater ___________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a805b730>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
____________ ERROR at setup of test_messages_tracked_message_senddm ____________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a805bc80>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_________ ERROR at setup of test_messages_tracked_message_senddmlater __________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a805b598>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
____________ ERROR at setup of test_messages_tracked_message_share _____________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a7ff37b8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
____________ ERROR at setup of test_messages_tracked_standup_finish ____________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a7ff3d08>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
__________________ ERROR at setup of test_involvement_tracked __________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a7ff3620>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a8005840>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
__________________ ERROR at setup of test_user_profile_valid ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a8005d90>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________________ ERROR at setup of test_invalid_user ______________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a80252f0>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a80258c8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
________________ ERROR at setup of test_successful_email_change ________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a8025e18>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________ ERROR at setup of test_cannot_change_to_taken_email ______________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a7fb4378>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
____________________ ERROR at setup of test_invalid_email[] ____________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a7fb47b8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
__________________ ERROR at setup of test_invalid_email[bob] ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a7fb4d90>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
______________ ERROR at setup of test_invalid_email[a@mgail.com] _______________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a7fc2400>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_________________ ERROR at setup of test_invalid_email[ab.com] _________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a7fc29d8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_______________ ERROR at setup of test_invalid_email[@gmail.com] _______________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a7fc2488>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
____________ ERROR at setup of test_invalid_email[ab@ab@gmail.com] _____________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a7fe1378>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a7fe1ae8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_______________ ERROR at setup of test_successful_handle_change ________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a7fe1f28>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________ ERROR at setup of test_cannot_change_to_taken_handle _____________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a7fa3400>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
___________________ ERROR at setup of test_invalid_handle[] ____________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a7fa3b70>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
___________________ ERROR at setup of test_invalid_handle[a] ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a7fa3f28>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
__________________ ERROR at setup of test_invalid_handle[aa] ___________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a7f88620>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_________ ERROR at setup of test_invalid_handle[aaaaaaaaaaaaaaaaaaaaa] _________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a7f88b70>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a7f889d8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
____________ ERROR at setup of test_user_profile_setname_valid_name ____________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a7f9b730>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
____________________ ERROR at setup of test_invalid_name[-] ____________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a7f9bc80>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_ ERROR at setup of test_invalid_name[-MRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMR] _

user_factory = <function user_factory.<locals>.make_user at 0x7f71a7f9b598>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_ ERROR at setup of test_invalid_name[PotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHead-] _

user_factory = <function user_factory.<locals>.make_user at 0x7f71a7f34730>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_ ERROR at setup of test_invalid_name[PotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHead-MRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMR] _

user_factory = <function user_factory.<locals>.make_user at 0x7f71a7f34c80>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a7f34598>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_________________ ERROR at setup of test_return_format_correct _________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a7f4f8c8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
________________ ERROR at setup of test_cannot_upload_non_jpeg _________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a7f4fd08>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
____________ ERROR at setup of test_invalid_dimensions[-1000-0-0-0] ____________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a7f5d2f0>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
____________ ERROR at setup of test_invalid_dimensions[0--1000-0-0] ____________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a7f5d8c8>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
____________ ERROR at setup of test_invalid_dimensions[0-0--1000-0] ____________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a7f5de18>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
____________ ERROR at setup of test_invalid_dimensions[0-0-0--1000] ____________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a7ef2378>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
______________________ ERROR at setup of test_invalid_url ______________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a7ef2950>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
_____________________ ERROR at setup of test_invalid_token _____________________

user_factory = <function user_factory.<locals>.make_user at 0x7f71a7ef2d08>

    @pytest.fixture
    def user_woody(user_factory):
>       woody = user_factory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

http_tests/fixtures.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

email = 'sheriff.woody@andysroom.com', password = 'qazwsx!!'
name_first = 'sheriff', name_last = 'woody'

    def make_user(email, password, name_first, name_last):
        User = namedtuple('User', ['email', 'password', 'name_first', 'name_last', 'u_id', 'token', 'handle_str'])
        reg = auth.auth_register(email, password, name_first, name_last, ctx)
    
        deets = user.user_profile(reg['token'], reg['auth_user_id'], ctx).popitem()[-1]
    
>       return User(email, password, name_first, name_last, reg['auth_user_id'], reg['token'], deets['handle_str'])
E       TypeError: string indices must be integers

http_tests/fixtures.py:40: TypeError
=================================== FAILURES ===================================
______________ test_handle_generation_unique[Bob-Smith-bobsmith] _______________

name_first = 'Bob', name_last = 'Smith', expected_handle = 'bobsmith'
ctx = None

    @pytest.mark.parametrize('name_first, name_last, expected_handle', [
        ('Bob', 'Smith', 'bobsmith'),
        ('ab' * 5, 'cd' * 6, f'{"ab" * 5}{"cd" * 5}')
    ])
    def test_handle_generation_unique(name_first, name_last, expected_handle, ctx):
        session = auth_register('bob.jane@gmail.com', '~~qazwsx', name_first, name_last, ctx)
    
>       actual_handle = user_profile(session['token'], session['auth_user_id'], ctx)['user']['handle_str']
E       KeyError: 'user'

http_tests/auth_tests/test_auth_register.py:43: KeyError
_ test_handle_generation_unique[ababababab-cdcdcdcdcdcd-abababababcdcdcdcdcd] __

name_first = 'ababababab', name_last = 'cdcdcdcdcdcd'
expected_handle = 'abababababcdcdcdcdcd', ctx = None

    @pytest.mark.parametrize('name_first, name_last, expected_handle', [
        ('Bob', 'Smith', 'bobsmith'),
        ('ab' * 5, 'cd' * 6, f'{"ab" * 5}{"cd" * 5}')
    ])
    def test_handle_generation_unique(name_first, name_last, expected_handle, ctx):
        session = auth_register('bob.jane@gmail.com', '~~qazwsx', name_first, name_last, ctx)
    
>       actual_handle = user_profile(session['token'], session['auth_user_id'], ctx)['user']['handle_str']
E       KeyError: 'user'

http_tests/auth_tests/test_auth_register.py:43: KeyError
_______________________ test_handle_generation_duplicate _______________________

ctx = None

    def test_handle_generation_duplicate(ctx):
        auth_register('bob.jane@gmail.com', '~~qazwsx', 'ab' * 5, 'cd' * 6, ctx)
        session = auth_register('jane.bob@gmail.com', '~~qazwsx', 'ab' * 5, 'cd' * 6, ctx)
    
>       actual_handle = user_profile(session['token'], session['auth_user_id'], ctx)['user']['handle_str']
E       KeyError: 'user'

http_tests/auth_tests/test_auth_register.py:52: KeyError
=========================== short test summary info ============================
FAILED http_tests/auth_tests/test_auth_register.py::test_handle_generation_unique[Bob-Smith-bobsmith]
FAILED http_tests/auth_tests/test_auth_register.py::test_handle_generation_unique[ababababab-cdcdcdcdcdcd-abababababcdcdcdcdcd]
FAILED http_tests/auth_tests/test_auth_register.py::test_handle_generation_duplicate
ERROR http_tests/admin_tests/test_admin_user_remove.py::test_removal_can_do_no_action
ERROR http_tests/admin_tests/test_admin_user_remove.py::test_removal_messages_correct_format
ERROR http_tests/admin_tests/test_admin_user_remove.py::test_removal_profile_still_fetchable
ERROR http_tests/admin_tests/test_admin_user_remove.py::test_removal_removed_from_channel
ERROR http_tests/admin_tests/test_admin_user_remove.py::test_removal_removed_from_dm
ERROR http_tests/admin_tests/test_admin_user_remove.py::test_removal_not_in_users_all
ERROR http_tests/admin_tests/test_admin_user_remove.py::test_invalid_user - T...
ERROR http_tests/admin_tests/test_admin_user_remove.py::test_cannot_remove_last_owner
ERROR http_tests/admin_tests/test_admin_user_remove.py::test_cannot_remove_user_nonowner
ERROR http_tests/admin_tests/test_admin_user_remove.py::test_invalid_token - ...
ERROR http_tests/admin_tests/test_admin_userpermission_change.py::test_successful_permission_change
ERROR http_tests/admin_tests/test_admin_userpermission_change.py::test_changing_to_same_permission_idempotent
ERROR http_tests/admin_tests/test_admin_userpermission_change.py::test_nonowner_cant_change_permissions
ERROR http_tests/admin_tests/test_admin_userpermission_change.py::test_invalid_user
ERROR http_tests/admin_tests/test_admin_userpermission_change.py::test_invalid_permission
ERROR http_tests/admin_tests/test_admin_userpermission_change.py::test_invalid_token
ERROR http_tests/auth_tests/test_auth_login.py::test_successful_login - TypeE...
ERROR http_tests/auth_tests/test_auth_login.py::test_can_have_two_sessions - ...
ERROR http_tests/auth_tests/test_auth_login.py::test_registered_but_incorrect_password
ERROR http_tests/auth_tests/test_auth_logout.py::test_successful_logout - Typ...
ERROR http_tests/auth_tests/test_auth_logout.py::test_not_logged_in_logout - ...
ERROR http_tests/auth_tests/test_auth_register.py::test_successful_registration
ERROR http_tests/auth_tests/test_passwordreset_request.py::test_return_format_correct
ERROR http_tests/auth_tests/test_passwordreset_request.py::test_password_request_logs_out_everywhere
ERROR http_tests/channel_tests/test_channel_addowner.py::test_channel_owner_can_addowner_when_member
ERROR http_tests/channel_tests/test_channel_addowner.py::test_non_member_cannot_add_owner
ERROR http_tests/channel_tests/test_channel_addowner.py::test_member_cannot_add_owner
ERROR http_tests/channel_tests/test_channel_addowner.py::test_cannot_addowner_prexisting_channel_owner
ERROR http_tests/channel_tests/test_channel_addowner.py::test_with_invalid_channel_id
ERROR http_tests/channel_tests/test_channel_addowner.py::test_invalid_token
ERROR http_tests/channel_tests/test_channel_details.py::test_member_successful
ERROR http_tests/channel_tests/test_channel_details.py::test_non_member_not_successful
ERROR http_tests/channel_tests/test_channel_details.py::test_invalid_channel_id
ERROR http_tests/channel_tests/test_channel_details.py::test_invalid_token - ...
ERROR http_tests/channel_tests/test_channel_invite.py::test_invite_global_owner
ERROR http_tests/channel_tests/test_channel_invite.py::test_invite_global_member
ERROR http_tests/channel_tests/test_channel_invite.py::test_invitation_from_non_channel_member
ERROR http_tests/channel_tests/test_channel_invite.py::test_channel_id_invalid
ERROR http_tests/channel_tests/test_channel_invite.py::test_u_id_invalid - Ty...
ERROR http_tests/channel_tests/test_channel_invite.py::test_invalidated_token
ERROR http_tests/channel_tests/test_channel_join.py::test_global_owner_join_channel_public
ERROR http_tests/channel_tests/test_channel_join.py::test_global_owner_join_channel_private
ERROR http_tests/channel_tests/test_channel_join.py::test_global_member_join_public
ERROR http_tests/channel_tests/test_channel_join.py::test_join_invalid_channel_id
ERROR http_tests/channel_tests/test_channel_join.py::test_invalidated_token
ERROR http_tests/channel_tests/test_channel_leave.py::test_member_leave_channel_successfully
ERROR http_tests/channel_tests/test_channel_leave.py::test_leave_channel_when_not_member
ERROR http_tests/channel_tests/test_channel_leave.py::test_invalid_channel_id
ERROR http_tests/channel_tests/test_channel_leave.py::test_invalid_token - Ty...
ERROR http_tests/channel_tests/test_channel_messages.py::test_under_fifty_messages_sent
ERROR http_tests/channel_tests/test_channel_messages.py::test_over_fifty_messages_sent
ERROR http_tests/channel_tests/test_channel_messages.py::test_removal_by_edit_reflected
ERROR http_tests/channel_tests/test_channel_messages.py::test_removal_by_deletion_reflected
ERROR http_tests/channel_tests/test_channel_messages.py::test_input_error_when_start_greater_than_message_num
ERROR http_tests/channel_tests/test_channel_messages.py::test_access_error_when_user_is_non_member
ERROR http_tests/channel_tests/test_channel_messages.py::test_input_error_when_channel_id_invalid
ERROR http_tests/channel_tests/test_channel_messages.py::test_access_error_when_invalid_token_given
ERROR http_tests/channel_tests/test_channel_removeowner.py::test_owner_can_remove_owner
ERROR http_tests/channel_tests/test_channel_removeowner.py::test_global_owner_can_remove_owner
ERROR http_tests/channel_tests/test_channel_removeowner.py::test_nonmember_cannot_remove_owner
ERROR http_tests/channel_tests/test_channel_removeowner.py::test_member_cannot_remove_owner
ERROR http_tests/channel_tests/test_channel_removeowner.py::test_cannot_remove_last_owner
ERROR http_tests/channel_tests/test_channel_removeowner.py::test_cannot_remove_non_owner
ERROR http_tests/channel_tests/test_channel_removeowner.py::test_with_invalid_channel_id
ERROR http_tests/channel_tests/test_channel_removeowner.py::test_invalidated_token
ERROR http_tests/channels_tests/test_channels_create.py::test_create_channel[True-andys room]
ERROR http_tests/channels_tests/test_channels_create.py::test_create_channel[False-andys room]
ERROR http_tests/channels_tests/test_channels_create.py::test_channel_name_length[True-I AM NOT A TOY AND ALSO THIS NAME IS TOO LONG]
ERROR http_tests/channels_tests/test_channels_create.py::test_channel_name_length[False-I AM NOT A TOY AND ALSO THIS NAME IS TOO LONG]
ERROR http_tests/channels_tests/test_channels_create.py::test_invalidated_token
ERROR http_tests/channels_tests/test_channels_list.py::test_when_in_no_channels
ERROR http_tests/channels_tests/test_channels_list.py::test_when_in_one_channel[True-andy]
ERROR http_tests/channels_tests/test_channels_list.py::test_when_in_one_channel[False-andy]
ERROR http_tests/channels_tests/test_channels_list.py::test_when_in_multiple_channels[False-True-ZERG-andy]
ERROR http_tests/channels_tests/test_channels_list.py::test_when_in_multiple_channels[False-False-ZERG-andy]
ERROR http_tests/channels_tests/test_channels_list.py::test_when_in_multiple_channels[True-True-ZERG-andy]
ERROR http_tests/channels_tests/test_channels_list.py::test_when_in_multiple_channels[True-False-ZERG-andy]
ERROR http_tests/channels_tests/test_channels_list.py::test_list_after_leave_channel
ERROR http_tests/channels_tests/test_channels_list.py::test_invalidated_token
ERROR http_tests/channels_tests/test_channels_listall.py::test_when_no_channels
ERROR http_tests/channels_tests/test_channels_listall.py::test_when_one_channel_exists_private
ERROR http_tests/channels_tests/test_channels_listall.py::test_when_one_channel_exists_public
ERROR http_tests/channels_tests/test_channels_listall.py::test_when_multiple_channels_exist
ERROR http_tests/channels_tests/test_channels_listall.py::test_invalidated_token
ERROR http_tests/dm_tests/test_dm_create.py::test_successful_dm_creation - Ty...
ERROR http_tests/dm_tests/test_dm_create.py::test_dm_name_creation_single - T...
ERROR http_tests/dm_tests/test_dm_create.py::test_dm_name_creation_multiple
ERROR http_tests/dm_tests/test_dm_create.py::test_dm_to_invalid_user - TypeEr...
ERROR http_tests/dm_tests/test_dm_create.py::test_invalid_token - TypeError: ...
ERROR http_tests/dm_tests/test_dm_details.py::test_member_successful - TypeEr...
ERROR http_tests/dm_tests/test_dm_details.py::test_non_member_not_successful
ERROR http_tests/dm_tests/test_dm_details.py::test_invalid_dm_id - TypeError:...
ERROR http_tests/dm_tests/test_dm_details.py::test_invalid_token - TypeError:...
ERROR http_tests/dm_tests/test_dm_invite.py::test_invite_global_member - Type...
ERROR http_tests/dm_tests/test_dm_invite.py::test_invitation_from_non_dm_member
ERROR http_tests/dm_tests/test_dm_invite.py::test_dm_id_invalid - TypeError: ...
ERROR http_tests/dm_tests/test_dm_invite.py::test_u_id_invalid - TypeError: s...
ERROR http_tests/dm_tests/test_dm_invite.py::test_invalidated_token - TypeErr...
ERROR http_tests/dm_tests/test_dm_leave.py::test_member_leave_dm_successfully
ERROR http_tests/dm_tests/test_dm_leave.py::test_leave_channel_when_not_member
ERROR http_tests/dm_tests/test_dm_leave.py::test_invalid_dm_id - TypeError: s...
ERROR http_tests/dm_tests/test_dm_leave.py::test_invalid_token - TypeError: s...
ERROR http_tests/dm_tests/test_dm_list.py::test_when_in_no_dms - TypeError: s...
ERROR http_tests/dm_tests/test_dm_list.py::test_when_in_one_dm - TypeError: s...
ERROR http_tests/dm_tests/test_dm_list.py::test_when_in_multiple_dms - TypeEr...
ERROR http_tests/dm_tests/test_dm_list.py::test_list_after_leave_dm - TypeErr...
ERROR http_tests/dm_tests/test_dm_list.py::test_invalidated_token - TypeError...
ERROR http_tests/dm_tests/test_dm_messages.py::test_under_fifty_messages_sent
ERROR http_tests/dm_tests/test_dm_messages.py::test_over_fifty_messages_sent
ERROR http_tests/dm_tests/test_dm_messages.py::test_removal_by_edit_reflected
ERROR http_tests/dm_tests/test_dm_messages.py::test_removal_by_deletion_reflected
ERROR http_tests/dm_tests/test_dm_messages.py::test_input_error_when_start_greater_than_message_num
ERROR http_tests/dm_tests/test_dm_messages.py::test_access_error_when_user_is_non_member
ERROR http_tests/dm_tests/test_dm_messages.py::test_input_error_when_dm_id_invalid
ERROR http_tests/dm_tests/test_dm_messages.py::test_access_error_when_invalid_token_given
ERROR http_tests/dm_tests/test_dm_remove.py::test_successful_dm_removal - Typ...
ERROR http_tests/dm_tests/test_dm_remove.py::test_removal_removes_messages - ...
ERROR http_tests/dm_tests/test_dm_remove.py::test_nonowner_cannot_remove_dm
ERROR http_tests/dm_tests/test_dm_remove.py::test_invalid_dm_id - TypeError: ...
ERROR http_tests/dm_tests/test_dm_remove.py::test_invalid_token - TypeError: ...
ERROR http_tests/message_tests/test_message_edit.py::test_original_poster_can_edit_message
ERROR http_tests/message_tests/test_message_edit.py::test_owner_can_edit_members_message
ERROR http_tests/message_tests/test_message_edit.py::test_global_owner_can_edit_members_message
ERROR http_tests/message_tests/test_message_edit.py::test_empty_edit_deletes_message
ERROR http_tests/message_tests/test_message_edit.py::test_invalid_message_length
ERROR http_tests/message_tests/test_message_edit.py::test_cannot_edit_deleted_message
ERROR http_tests/message_tests/test_message_edit.py::test_nonowner_nonposter_cant_edit
ERROR http_tests/message_tests/test_message_edit.py::test_invalid_token - Typ...
ERROR http_tests/message_tests/test_message_meta.py::test_message_ids_unique
ERROR http_tests/message_tests/test_message_pin.py::test_successful_pin_in_channel
ERROR http_tests/message_tests/test_message_pin.py::test_successful_pin_in_dm
ERROR http_tests/message_tests/test_message_pin.py::test_invalid_message_id
ERROR http_tests/message_tests/test_message_pin.py::test_cannot_pin_twice - T...
ERROR http_tests/message_tests/test_message_pin.py::test_channel_member_cant_pin
ERROR http_tests/message_tests/test_message_pin.py::test_dm_member_cant_pin
ERROR http_tests/message_tests/test_message_pin.py::test_nonmember_cant_pin
ERROR http_tests/message_tests/test_message_pin.py::test_invalid_token - Type...
ERROR http_tests/message_tests/test_message_react.py::test_successful_react_in_channel
ERROR http_tests/message_tests/test_message_react.py::test_successful_react_to_dm_message
ERROR http_tests/message_tests/test_message_react.py::test_invalid_message_id
ERROR http_tests/message_tests/test_message_react.py::test_invalid_react_id
ERROR http_tests/message_tests/test_message_react.py::test_cant_react_twice
ERROR http_tests/message_tests/test_message_react.py::test_nonmember_cannot_react
ERROR http_tests/message_tests/test_message_react.py::test_invalid_token - Ty...
ERROR http_tests/message_tests/test_message_remove.py::test_original_poster_can_remove_message
ERROR http_tests/message_tests/test_message_remove.py::test_owner_can_remove_members_message
ERROR http_tests/message_tests/test_message_remove.py::test_global_owner_can_remove_members_message
ERROR http_tests/message_tests/test_message_remove.py::test_cannot_remove_deleted_message
ERROR http_tests/message_tests/test_message_remove.py::test_nonowner_nonposter_cant_remove_message
ERROR http_tests/message_tests/test_message_remove.py::test_invalid_token - T...
ERROR http_tests/message_tests/test_message_send.py::test_valid_message - Typ...
ERROR http_tests/message_tests/test_message_send.py::test_nonmember_post - Ty...
ERROR http_tests/message_tests/test_message_send.py::test_invalid_message - T...
ERROR http_tests/message_tests/test_message_send.py::test_invalid_token - Typ...
ERROR http_tests/message_tests/test_message_senddm.py::test_valid_message - T...
ERROR http_tests/message_tests/test_message_senddm.py::test_nonmember_post - ...
ERROR http_tests/message_tests/test_message_senddm.py::test_invalid_message
ERROR http_tests/message_tests/test_message_senddm.py::test_invalid_token - T...
ERROR http_tests/message_tests/test_message_sendlater.py::test_valid_future_message
ERROR http_tests/message_tests/test_message_sendlater.py::test_nonmeber_cannot_sendlater
ERROR http_tests/message_tests/test_message_sendlater.py::test_cannot_time_travel
ERROR http_tests/message_tests/test_message_sendlater.py::test_message_too_long
ERROR http_tests/message_tests/test_message_sendlater.py::test_invalid_channel
ERROR http_tests/message_tests/test_message_sendlater.py::test_invalid_token
ERROR http_tests/message_tests/test_message_sendlaterdm.py::test_valid_future_message
ERROR http_tests/message_tests/test_message_sendlaterdm.py::test_nonmeber_cannot_sendlater
ERROR http_tests/message_tests/test_message_sendlaterdm.py::test_cannot_time_travel
ERROR http_tests/message_tests/test_message_sendlaterdm.py::test_message_too_long
ERROR http_tests/message_tests/test_message_sendlaterdm.py::test_invalid_dm
ERROR http_tests/message_tests/test_message_sendlaterdm.py::test_invalid_token
ERROR http_tests/message_tests/test_message_share.py::test_successful_share_to_channel
ERROR http_tests/message_tests/test_message_share.py::test_successful_share_to_dm
ERROR http_tests/message_tests/test_message_share.py::test_successful_cross_share[True]
ERROR http_tests/message_tests/test_message_share.py::test_successful_cross_share[False]
ERROR http_tests/message_tests/test_message_share.py::test_cannot_share_to_unjoined_dm
ERROR http_tests/message_tests/test_message_share.py::test_cannot_share_to_unjoined_channel
ERROR http_tests/message_tests/test_message_share.py::test_invalid_token - Ty...
ERROR http_tests/message_tests/test_message_unpin.py::test_successful_unpin_in_channel
ERROR http_tests/message_tests/test_message_unpin.py::test_successful_unpin_in_dm
ERROR http_tests/message_tests/test_message_unpin.py::test_invalid_message_id
ERROR http_tests/message_tests/test_message_unpin.py::test_cannot_unpin_twice
ERROR http_tests/message_tests/test_message_unpin.py::test_channel_member_cant_unpin
ERROR http_tests/message_tests/test_message_unpin.py::test_dm_member_cant_unpin
ERROR http_tests/message_tests/test_message_unpin.py::test_nonmember_cant_unpin
ERROR http_tests/message_tests/test_message_unpin.py::test_invalid_token - Ty...
ERROR http_tests/message_tests/test_message_unreact.py::test_successful_unreact_in_channel
ERROR http_tests/message_tests/test_message_unreact.py::test_successful_unreact_to_dm_message
ERROR http_tests/message_tests/test_message_unreact.py::test_invalid_message_id
ERROR http_tests/message_tests/test_message_unreact.py::test_invalid_react_id
ERROR http_tests/message_tests/test_message_unreact.py::test_cant_unreact_twice
ERROR http_tests/message_tests/test_message_unreact.py::test_nonmember_cannot_unreact
ERROR http_tests/message_tests/test_message_unreact.py::test_invalid_token - ...
ERROR http_tests/other_tests/test_clear.py::test_clear_works - TypeError: str...
ERROR http_tests/other_tests/test_notifications_get.py::test_tag_thru_message_send_triggers_notification
ERROR http_tests/other_tests/test_notifications_get.py::test_tag_thru_message_senddm_triggers_notification
ERROR http_tests/other_tests/test_notifications_get.py::test_tag_thru_message_sendlater_triggers_notification
ERROR http_tests/other_tests/test_notifications_get.py::test_tag_thru_message_sendlaterdm_triggers_notification
ERROR http_tests/other_tests/test_notifications_get.py::test_tag_notification_message_preview_length[a small message]
ERROR http_tests/other_tests/test_notifications_get.py::test_tag_notification_message_preview_length[AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA]
ERROR http_tests/other_tests/test_notifications_get.py::test_react_triggers_notification[ch]
ERROR http_tests/other_tests/test_notifications_get.py::test_react_triggers_notification[dm]
ERROR http_tests/other_tests/test_notifications_get.py::test_add_thru_ch_invite_triggers_notification
ERROR http_tests/other_tests/test_notifications_get.py::test_add_thru_dm_create_triggers_notification
ERROR http_tests/other_tests/test_notifications_get.py::test_add_thru_dm_invite_triggers_notification
ERROR http_tests/other_tests/test_notifications_get.py::test_most_recent_20_notifications_fetched
ERROR http_tests/other_tests/test_notifications_get.py::test_invalid_token - ...
ERROR http_tests/other_tests/test_search.py::test_no_matches - TypeError: str...
ERROR http_tests/other_tests/test_search.py::test_single_match - TypeError: s...
ERROR http_tests/other_tests/test_search.py::test_multiple_matches - TypeErro...
ERROR http_tests/other_tests/test_search.py::test_multiple_channels_joined - ...
ERROR http_tests/other_tests/test_search.py::test_search_includes_only_joined_channels
ERROR http_tests/other_tests/test_search.py::test_search_matches_more_than_just_authorised_user
ERROR http_tests/other_tests/test_search.py::test_invalid_search[aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa]
ERROR http_tests/other_tests/test_search.py::test_invalid_token - TypeError: ...
ERROR http_tests/other_tests/test_users_all.py::test_successful_users_all - T...
ERROR http_tests/other_tests/test_users_all.py::test_invalid_token - TypeErro...
ERROR http_tests/standup_tests/test_standup_active.py::test_correct_return_format[True]
ERROR http_tests/standup_tests/test_standup_active.py::test_correct_return_format[False]
ERROR http_tests/standup_tests/test_standup_active.py::test_active_standup - ...
ERROR http_tests/standup_tests/test_standup_active.py::test_inactive_standup
ERROR http_tests/standup_tests/test_standup_active.py::test_invalid_channel_id
ERROR http_tests/standup_tests/test_standup_active.py::test_invalid_token - T...
ERROR http_tests/standup_tests/test_standup_send.py::test_messages_buffered_and_displayed_correctly
ERROR http_tests/standup_tests/test_standup_send.py::test_return_format - Typ...
ERROR http_tests/standup_tests/test_standup_send.py::test_non_member_cannot_standup_send
ERROR http_tests/standup_tests/test_standup_send.py::test_send_when_standup_inactive
ERROR http_tests/standup_tests/test_standup_send.py::test_invalid_message_length
ERROR http_tests/standup_tests/test_standup_send.py::test_invalid_channel_id
ERROR http_tests/standup_tests/test_standup_send.py::test_invalid_token - Typ...
ERROR http_tests/standup_tests/test_standup_start.py::test_standup_start_return_format
ERROR http_tests/standup_tests/test_standup_start.py::test_standup_restartable_after_lapse
ERROR http_tests/standup_tests/test_standup_start.py::test_standup_affects_only_one_channel
ERROR http_tests/standup_tests/test_standup_start.py::test_standup_cannot_be_started_in_dm
ERROR http_tests/standup_tests/test_standup_start.py::test_nonmember_cannot_start_standup
ERROR http_tests/standup_tests/test_standup_start.py::test_cannot_start_standup_when_already_active
ERROR http_tests/standup_tests/test_standup_start.py::test_invalid_channel_id
ERROR http_tests/standup_tests/test_standup_start.py::test_invalid_token - Ty...
ERROR http_tests/stats_tests/test_user_stats.py::test_return_type_correct - T...
ERROR http_tests/stats_tests/test_user_stats.py::test_channels_tracked_channels_create
ERROR http_tests/stats_tests/test_user_stats.py::test_channels_tracked_channel_join
ERROR http_tests/stats_tests/test_user_stats.py::test_channels_tracked_channel_invite
ERROR http_tests/stats_tests/test_user_stats.py::test_channels_tracked_channel_leave
ERROR http_tests/stats_tests/test_user_stats.py::test_channels_tracked_channel_add_owner
ERROR http_tests/stats_tests/test_user_stats.py::test_dms_tracked_dm_create
ERROR http_tests/stats_tests/test_user_stats.py::test_dms_tracked_dm_invite
ERROR http_tests/stats_tests/test_user_stats.py::test_dms_tracked_dm_leave - ...
ERROR http_tests/stats_tests/test_user_stats.py::test_dms_tracked_dm_remove
ERROR http_tests/stats_tests/test_user_stats.py::test_messages_tracked_message_send
ERROR http_tests/stats_tests/test_user_stats.py::test_messages_tracked_message_sendlater
ERROR http_tests/stats_tests/test_user_stats.py::test_messages_tracked_message_senddm
ERROR http_tests/stats_tests/test_user_stats.py::test_messages_tracked_message_senddmlater
ERROR http_tests/stats_tests/test_user_stats.py::test_messages_tracked_message_share
ERROR http_tests/stats_tests/test_user_stats.py::test_messages_tracked_standup_finish
ERROR http_tests/stats_tests/test_user_stats.py::test_involvement_tracked - T...
ERROR http_tests/stats_tests/test_user_stats.py::test_invalid_token - TypeErr...
ERROR http_tests/user_tests/test_user_profile.py::test_user_profile_valid - T...
ERROR http_tests/user_tests/test_user_profile.py::test_invalid_user - TypeErr...
ERROR http_tests/user_tests/test_user_profile.py::test_invalid_token - TypeEr...
ERROR http_tests/user_tests/test_user_profile_setemail.py::test_successful_email_change
ERROR http_tests/user_tests/test_user_profile_setemail.py::test_cannot_change_to_taken_email
ERROR http_tests/user_tests/test_user_profile_setemail.py::test_invalid_email[]
ERROR http_tests/user_tests/test_user_profile_setemail.py::test_invalid_email[bob]
ERROR http_tests/user_tests/test_user_profile_setemail.py::test_invalid_email[a@mgail.com]
ERROR http_tests/user_tests/test_user_profile_setemail.py::test_invalid_email[ab.com]
ERROR http_tests/user_tests/test_user_profile_setemail.py::test_invalid_email[@gmail.com]
ERROR http_tests/user_tests/test_user_profile_setemail.py::test_invalid_email[ab@ab@gmail.com]
ERROR http_tests/user_tests/test_user_profile_setemail.py::test_invalid_token
ERROR http_tests/user_tests/test_user_profile_sethandle.py::test_successful_handle_change
ERROR http_tests/user_tests/test_user_profile_sethandle.py::test_cannot_change_to_taken_handle
ERROR http_tests/user_tests/test_user_profile_sethandle.py::test_invalid_handle[]
ERROR http_tests/user_tests/test_user_profile_sethandle.py::test_invalid_handle[a]
ERROR http_tests/user_tests/test_user_profile_sethandle.py::test_invalid_handle[aa]
ERROR http_tests/user_tests/test_user_profile_sethandle.py::test_invalid_handle[aaaaaaaaaaaaaaaaaaaaa]
ERROR http_tests/user_tests/test_user_profile_sethandle.py::test_invalid_token
ERROR http_tests/user_tests/test_user_profile_setname.py::test_user_profile_setname_valid_name
ERROR http_tests/user_tests/test_user_profile_setname.py::test_invalid_name[-]
ERROR http_tests/user_tests/test_user_profile_setname.py::test_invalid_name[-MRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMR]
ERROR http_tests/user_tests/test_user_profile_setname.py::test_invalid_name[PotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHead-]
ERROR http_tests/user_tests/test_user_profile_setname.py::test_invalid_name[PotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHead-MRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMR]
ERROR http_tests/user_tests/test_user_profile_setname.py::test_invalid_token
ERROR http_tests/user_tests/test_user_profile_uploadphoto.py::test_return_format_correct
ERROR http_tests/user_tests/test_user_profile_uploadphoto.py::test_cannot_upload_non_jpeg
ERROR http_tests/user_tests/test_user_profile_uploadphoto.py::test_invalid_dimensions[-1000-0-0-0]
ERROR http_tests/user_tests/test_user_profile_uploadphoto.py::test_invalid_dimensions[0--1000-0-0]
ERROR http_tests/user_tests/test_user_profile_uploadphoto.py::test_invalid_dimensions[0-0--1000-0]
ERROR http_tests/user_tests/test_user_profile_uploadphoto.py::test_invalid_dimensions[0-0-0--1000]
ERROR http_tests/user_tests/test_user_profile_uploadphoto.py::test_invalid_url
ERROR http_tests/user_tests/test_user_profile_uploadphoto.py::test_invalid_token
============ 3 failed, 30 passed, 22 skipped, 288 errors in 15.49s =============
